//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3649
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace _20131111_P7File {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private DECLARATIONDataTable tableDECLARATION;
        
        private HEADDataTable tableHEAD;
        
        private OWNERDataTable tableOWNER;
        
        private OWNER_NAZVADataTable tableOWNER_NAZVA;
        
        private OWNER_ADRDataTable tableOWNER_ADR;
        
        private OWNER_PASSDataTable tableOWNER_PASS;
        
        private PR_UCHDataTable tablePR_UCH;
        
        private OPR_UCHDataTable tableOPR_UCH;
        
        private GOL_UCHDataTable tableGOL_UCH;
        
        private ZAG_UCHDataTable tableZAG_UCH;
        
        private PERE_GOLOSDataTable tablePERE_GOLOS;
        
        private TO_GL_OSOBADataTable tableTO_GL_OSOBA;
        
        private FROM_GL_OSOBADataTable tableFROM_GL_OSOBA;
        
        private GL_NABUTDataTable tableGL_NABUT;
        
        private SUM_BANKDataTable tableSUM_BANK;
        
        private MAN_BANKDataTable tableMAN_BANK;
        
        private MB_NAZVADataTable tableMB_NAZVA;
        
        private MB_ISP_NAZVADataTable tableMB_ISP_NAZVA;
        
        private global::System.Data.DataRelation relationDECLARATION_HEAD;
        
        private global::System.Data.DataRelation relationDECLARATION_OWNER;
        
        private global::System.Data.DataRelation relationOWNER_OWNER_NAZVA;
        
        private global::System.Data.DataRelation relationOWNER_OWNER_ADR;
        
        private global::System.Data.DataRelation relationOWNER_OWNER_PASS;
        
        private global::System.Data.DataRelation relationOWNER_PR_UCH;
        
        private global::System.Data.DataRelation relationOWNER_OPR_UCH;
        
        private global::System.Data.DataRelation relationOWNER_GOL_UCH;
        
        private global::System.Data.DataRelation relationOWNER_ZAG_UCH;
        
        private global::System.Data.DataRelation relationDECLARATION_PERE_GOLOS;
        
        private global::System.Data.DataRelation relationPERE_GOLOS_TO_GL_OSOBA;
        
        private global::System.Data.DataRelation relationPERE_GOLOS_FROM_GL_OSOBA;
        
        private global::System.Data.DataRelation relationPERE_GOLOS_GL_NABUT;
        
        private global::System.Data.DataRelation relationDECLARATION_SUM_BANK;
        
        private global::System.Data.DataRelation relationDECLARATION_MAN_BANK;
        
        private global::System.Data.DataRelation relationMAN_BANK_MB_NAZVA;
        
        private global::System.Data.DataRelation relationMAN_BANK_MB_ISP_NAZVA;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DECLARATION"] != null)) {
                    base.Tables.Add(new DECLARATIONDataTable(ds.Tables["DECLARATION"]));
                }
                if ((ds.Tables["HEAD"] != null)) {
                    base.Tables.Add(new HEADDataTable(ds.Tables["HEAD"]));
                }
                if ((ds.Tables["OWNER"] != null)) {
                    base.Tables.Add(new OWNERDataTable(ds.Tables["OWNER"]));
                }
                if ((ds.Tables["OWNER_NAZVA"] != null)) {
                    base.Tables.Add(new OWNER_NAZVADataTable(ds.Tables["OWNER_NAZVA"]));
                }
                if ((ds.Tables["OWNER_ADR"] != null)) {
                    base.Tables.Add(new OWNER_ADRDataTable(ds.Tables["OWNER_ADR"]));
                }
                if ((ds.Tables["OWNER_PASS"] != null)) {
                    base.Tables.Add(new OWNER_PASSDataTable(ds.Tables["OWNER_PASS"]));
                }
                if ((ds.Tables["PR_UCH"] != null)) {
                    base.Tables.Add(new PR_UCHDataTable(ds.Tables["PR_UCH"]));
                }
                if ((ds.Tables["OPR_UCH"] != null)) {
                    base.Tables.Add(new OPR_UCHDataTable(ds.Tables["OPR_UCH"]));
                }
                if ((ds.Tables["GOL_UCH"] != null)) {
                    base.Tables.Add(new GOL_UCHDataTable(ds.Tables["GOL_UCH"]));
                }
                if ((ds.Tables["ZAG_UCH"] != null)) {
                    base.Tables.Add(new ZAG_UCHDataTable(ds.Tables["ZAG_UCH"]));
                }
                if ((ds.Tables["PERE_GOLOS"] != null)) {
                    base.Tables.Add(new PERE_GOLOSDataTable(ds.Tables["PERE_GOLOS"]));
                }
                if ((ds.Tables["TO_GL_OSOBA"] != null)) {
                    base.Tables.Add(new TO_GL_OSOBADataTable(ds.Tables["TO_GL_OSOBA"]));
                }
                if ((ds.Tables["FROM_GL_OSOBA"] != null)) {
                    base.Tables.Add(new FROM_GL_OSOBADataTable(ds.Tables["FROM_GL_OSOBA"]));
                }
                if ((ds.Tables["GL_NABUT"] != null)) {
                    base.Tables.Add(new GL_NABUTDataTable(ds.Tables["GL_NABUT"]));
                }
                if ((ds.Tables["SUM_BANK"] != null)) {
                    base.Tables.Add(new SUM_BANKDataTable(ds.Tables["SUM_BANK"]));
                }
                if ((ds.Tables["MAN_BANK"] != null)) {
                    base.Tables.Add(new MAN_BANKDataTable(ds.Tables["MAN_BANK"]));
                }
                if ((ds.Tables["MB_NAZVA"] != null)) {
                    base.Tables.Add(new MB_NAZVADataTable(ds.Tables["MB_NAZVA"]));
                }
                if ((ds.Tables["MB_ISP_NAZVA"] != null)) {
                    base.Tables.Add(new MB_ISP_NAZVADataTable(ds.Tables["MB_ISP_NAZVA"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DECLARATIONDataTable DECLARATION {
            get {
                return this.tableDECLARATION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HEADDataTable HEAD {
            get {
                return this.tableHEAD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OWNERDataTable OWNER {
            get {
                return this.tableOWNER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OWNER_NAZVADataTable OWNER_NAZVA {
            get {
                return this.tableOWNER_NAZVA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OWNER_ADRDataTable OWNER_ADR {
            get {
                return this.tableOWNER_ADR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OWNER_PASSDataTable OWNER_PASS {
            get {
                return this.tableOWNER_PASS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PR_UCHDataTable PR_UCH {
            get {
                return this.tablePR_UCH;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OPR_UCHDataTable OPR_UCH {
            get {
                return this.tableOPR_UCH;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GOL_UCHDataTable GOL_UCH {
            get {
                return this.tableGOL_UCH;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZAG_UCHDataTable ZAG_UCH {
            get {
                return this.tableZAG_UCH;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PERE_GOLOSDataTable PERE_GOLOS {
            get {
                return this.tablePERE_GOLOS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TO_GL_OSOBADataTable TO_GL_OSOBA {
            get {
                return this.tableTO_GL_OSOBA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FROM_GL_OSOBADataTable FROM_GL_OSOBA {
            get {
                return this.tableFROM_GL_OSOBA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GL_NABUTDataTable GL_NABUT {
            get {
                return this.tableGL_NABUT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SUM_BANKDataTable SUM_BANK {
            get {
                return this.tableSUM_BANK;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MAN_BANKDataTable MAN_BANK {
            get {
                return this.tableMAN_BANK;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MB_NAZVADataTable MB_NAZVA {
            get {
                return this.tableMB_NAZVA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MB_ISP_NAZVADataTable MB_ISP_NAZVA {
            get {
                return this.tableMB_ISP_NAZVA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DECLARATION"] != null)) {
                    base.Tables.Add(new DECLARATIONDataTable(ds.Tables["DECLARATION"]));
                }
                if ((ds.Tables["HEAD"] != null)) {
                    base.Tables.Add(new HEADDataTable(ds.Tables["HEAD"]));
                }
                if ((ds.Tables["OWNER"] != null)) {
                    base.Tables.Add(new OWNERDataTable(ds.Tables["OWNER"]));
                }
                if ((ds.Tables["OWNER_NAZVA"] != null)) {
                    base.Tables.Add(new OWNER_NAZVADataTable(ds.Tables["OWNER_NAZVA"]));
                }
                if ((ds.Tables["OWNER_ADR"] != null)) {
                    base.Tables.Add(new OWNER_ADRDataTable(ds.Tables["OWNER_ADR"]));
                }
                if ((ds.Tables["OWNER_PASS"] != null)) {
                    base.Tables.Add(new OWNER_PASSDataTable(ds.Tables["OWNER_PASS"]));
                }
                if ((ds.Tables["PR_UCH"] != null)) {
                    base.Tables.Add(new PR_UCHDataTable(ds.Tables["PR_UCH"]));
                }
                if ((ds.Tables["OPR_UCH"] != null)) {
                    base.Tables.Add(new OPR_UCHDataTable(ds.Tables["OPR_UCH"]));
                }
                if ((ds.Tables["GOL_UCH"] != null)) {
                    base.Tables.Add(new GOL_UCHDataTable(ds.Tables["GOL_UCH"]));
                }
                if ((ds.Tables["ZAG_UCH"] != null)) {
                    base.Tables.Add(new ZAG_UCHDataTable(ds.Tables["ZAG_UCH"]));
                }
                if ((ds.Tables["PERE_GOLOS"] != null)) {
                    base.Tables.Add(new PERE_GOLOSDataTable(ds.Tables["PERE_GOLOS"]));
                }
                if ((ds.Tables["TO_GL_OSOBA"] != null)) {
                    base.Tables.Add(new TO_GL_OSOBADataTable(ds.Tables["TO_GL_OSOBA"]));
                }
                if ((ds.Tables["FROM_GL_OSOBA"] != null)) {
                    base.Tables.Add(new FROM_GL_OSOBADataTable(ds.Tables["FROM_GL_OSOBA"]));
                }
                if ((ds.Tables["GL_NABUT"] != null)) {
                    base.Tables.Add(new GL_NABUTDataTable(ds.Tables["GL_NABUT"]));
                }
                if ((ds.Tables["SUM_BANK"] != null)) {
                    base.Tables.Add(new SUM_BANKDataTable(ds.Tables["SUM_BANK"]));
                }
                if ((ds.Tables["MAN_BANK"] != null)) {
                    base.Tables.Add(new MAN_BANKDataTable(ds.Tables["MAN_BANK"]));
                }
                if ((ds.Tables["MB_NAZVA"] != null)) {
                    base.Tables.Add(new MB_NAZVADataTable(ds.Tables["MB_NAZVA"]));
                }
                if ((ds.Tables["MB_ISP_NAZVA"] != null)) {
                    base.Tables.Add(new MB_ISP_NAZVADataTable(ds.Tables["MB_ISP_NAZVA"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDECLARATION = ((DECLARATIONDataTable)(base.Tables["DECLARATION"]));
            if ((initTable == true)) {
                if ((this.tableDECLARATION != null)) {
                    this.tableDECLARATION.InitVars();
                }
            }
            this.tableHEAD = ((HEADDataTable)(base.Tables["HEAD"]));
            if ((initTable == true)) {
                if ((this.tableHEAD != null)) {
                    this.tableHEAD.InitVars();
                }
            }
            this.tableOWNER = ((OWNERDataTable)(base.Tables["OWNER"]));
            if ((initTable == true)) {
                if ((this.tableOWNER != null)) {
                    this.tableOWNER.InitVars();
                }
            }
            this.tableOWNER_NAZVA = ((OWNER_NAZVADataTable)(base.Tables["OWNER_NAZVA"]));
            if ((initTable == true)) {
                if ((this.tableOWNER_NAZVA != null)) {
                    this.tableOWNER_NAZVA.InitVars();
                }
            }
            this.tableOWNER_ADR = ((OWNER_ADRDataTable)(base.Tables["OWNER_ADR"]));
            if ((initTable == true)) {
                if ((this.tableOWNER_ADR != null)) {
                    this.tableOWNER_ADR.InitVars();
                }
            }
            this.tableOWNER_PASS = ((OWNER_PASSDataTable)(base.Tables["OWNER_PASS"]));
            if ((initTable == true)) {
                if ((this.tableOWNER_PASS != null)) {
                    this.tableOWNER_PASS.InitVars();
                }
            }
            this.tablePR_UCH = ((PR_UCHDataTable)(base.Tables["PR_UCH"]));
            if ((initTable == true)) {
                if ((this.tablePR_UCH != null)) {
                    this.tablePR_UCH.InitVars();
                }
            }
            this.tableOPR_UCH = ((OPR_UCHDataTable)(base.Tables["OPR_UCH"]));
            if ((initTable == true)) {
                if ((this.tableOPR_UCH != null)) {
                    this.tableOPR_UCH.InitVars();
                }
            }
            this.tableGOL_UCH = ((GOL_UCHDataTable)(base.Tables["GOL_UCH"]));
            if ((initTable == true)) {
                if ((this.tableGOL_UCH != null)) {
                    this.tableGOL_UCH.InitVars();
                }
            }
            this.tableZAG_UCH = ((ZAG_UCHDataTable)(base.Tables["ZAG_UCH"]));
            if ((initTable == true)) {
                if ((this.tableZAG_UCH != null)) {
                    this.tableZAG_UCH.InitVars();
                }
            }
            this.tablePERE_GOLOS = ((PERE_GOLOSDataTable)(base.Tables["PERE_GOLOS"]));
            if ((initTable == true)) {
                if ((this.tablePERE_GOLOS != null)) {
                    this.tablePERE_GOLOS.InitVars();
                }
            }
            this.tableTO_GL_OSOBA = ((TO_GL_OSOBADataTable)(base.Tables["TO_GL_OSOBA"]));
            if ((initTable == true)) {
                if ((this.tableTO_GL_OSOBA != null)) {
                    this.tableTO_GL_OSOBA.InitVars();
                }
            }
            this.tableFROM_GL_OSOBA = ((FROM_GL_OSOBADataTable)(base.Tables["FROM_GL_OSOBA"]));
            if ((initTable == true)) {
                if ((this.tableFROM_GL_OSOBA != null)) {
                    this.tableFROM_GL_OSOBA.InitVars();
                }
            }
            this.tableGL_NABUT = ((GL_NABUTDataTable)(base.Tables["GL_NABUT"]));
            if ((initTable == true)) {
                if ((this.tableGL_NABUT != null)) {
                    this.tableGL_NABUT.InitVars();
                }
            }
            this.tableSUM_BANK = ((SUM_BANKDataTable)(base.Tables["SUM_BANK"]));
            if ((initTable == true)) {
                if ((this.tableSUM_BANK != null)) {
                    this.tableSUM_BANK.InitVars();
                }
            }
            this.tableMAN_BANK = ((MAN_BANKDataTable)(base.Tables["MAN_BANK"]));
            if ((initTable == true)) {
                if ((this.tableMAN_BANK != null)) {
                    this.tableMAN_BANK.InitVars();
                }
            }
            this.tableMB_NAZVA = ((MB_NAZVADataTable)(base.Tables["MB_NAZVA"]));
            if ((initTable == true)) {
                if ((this.tableMB_NAZVA != null)) {
                    this.tableMB_NAZVA.InitVars();
                }
            }
            this.tableMB_ISP_NAZVA = ((MB_ISP_NAZVADataTable)(base.Tables["MB_ISP_NAZVA"]));
            if ((initTable == true)) {
                if ((this.tableMB_ISP_NAZVA != null)) {
                    this.tableMB_ISP_NAZVA.InitVars();
                }
            }
            this.relationDECLARATION_HEAD = this.Relations["DECLARATION_HEAD"];
            this.relationDECLARATION_OWNER = this.Relations["DECLARATION_OWNER"];
            this.relationOWNER_OWNER_NAZVA = this.Relations["OWNER_OWNER_NAZVA"];
            this.relationOWNER_OWNER_ADR = this.Relations["OWNER_OWNER_ADR"];
            this.relationOWNER_OWNER_PASS = this.Relations["OWNER_OWNER_PASS"];
            this.relationOWNER_PR_UCH = this.Relations["OWNER_PR_UCH"];
            this.relationOWNER_OPR_UCH = this.Relations["OWNER_OPR_UCH"];
            this.relationOWNER_GOL_UCH = this.Relations["OWNER_GOL_UCH"];
            this.relationOWNER_ZAG_UCH = this.Relations["OWNER_ZAG_UCH"];
            this.relationDECLARATION_PERE_GOLOS = this.Relations["DECLARATION_PERE_GOLOS"];
            this.relationPERE_GOLOS_TO_GL_OSOBA = this.Relations["PERE_GOLOS_TO_GL_OSOBA"];
            this.relationPERE_GOLOS_FROM_GL_OSOBA = this.Relations["PERE_GOLOS_FROM_GL_OSOBA"];
            this.relationPERE_GOLOS_GL_NABUT = this.Relations["PERE_GOLOS_GL_NABUT"];
            this.relationDECLARATION_SUM_BANK = this.Relations["DECLARATION_SUM_BANK"];
            this.relationDECLARATION_MAN_BANK = this.Relations["DECLARATION_MAN_BANK"];
            this.relationMAN_BANK_MB_NAZVA = this.Relations["MAN_BANK_MB_NAZVA"];
            this.relationMAN_BANK_MB_ISP_NAZVA = this.Relations["MAN_BANK_MB_ISP_NAZVA"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDECLARATION = new DECLARATIONDataTable();
            base.Tables.Add(this.tableDECLARATION);
            this.tableHEAD = new HEADDataTable();
            base.Tables.Add(this.tableHEAD);
            this.tableOWNER = new OWNERDataTable();
            base.Tables.Add(this.tableOWNER);
            this.tableOWNER_NAZVA = new OWNER_NAZVADataTable();
            base.Tables.Add(this.tableOWNER_NAZVA);
            this.tableOWNER_ADR = new OWNER_ADRDataTable();
            base.Tables.Add(this.tableOWNER_ADR);
            this.tableOWNER_PASS = new OWNER_PASSDataTable();
            base.Tables.Add(this.tableOWNER_PASS);
            this.tablePR_UCH = new PR_UCHDataTable();
            base.Tables.Add(this.tablePR_UCH);
            this.tableOPR_UCH = new OPR_UCHDataTable();
            base.Tables.Add(this.tableOPR_UCH);
            this.tableGOL_UCH = new GOL_UCHDataTable();
            base.Tables.Add(this.tableGOL_UCH);
            this.tableZAG_UCH = new ZAG_UCHDataTable();
            base.Tables.Add(this.tableZAG_UCH);
            this.tablePERE_GOLOS = new PERE_GOLOSDataTable();
            base.Tables.Add(this.tablePERE_GOLOS);
            this.tableTO_GL_OSOBA = new TO_GL_OSOBADataTable();
            base.Tables.Add(this.tableTO_GL_OSOBA);
            this.tableFROM_GL_OSOBA = new FROM_GL_OSOBADataTable();
            base.Tables.Add(this.tableFROM_GL_OSOBA);
            this.tableGL_NABUT = new GL_NABUTDataTable();
            base.Tables.Add(this.tableGL_NABUT);
            this.tableSUM_BANK = new SUM_BANKDataTable();
            base.Tables.Add(this.tableSUM_BANK);
            this.tableMAN_BANK = new MAN_BANKDataTable();
            base.Tables.Add(this.tableMAN_BANK);
            this.tableMB_NAZVA = new MB_NAZVADataTable();
            base.Tables.Add(this.tableMB_NAZVA);
            this.tableMB_ISP_NAZVA = new MB_ISP_NAZVADataTable();
            base.Tables.Add(this.tableMB_ISP_NAZVA);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("DECLARATION_HEAD", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableHEAD.DECLARATION_IdColumn});
            this.tableHEAD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("DECLARATION_OWNER", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER.DECLARATION_IdColumn});
            this.tableOWNER.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OWNER_OWNER_NAZVA", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER_NAZVA.OWNER_IdColumn});
            this.tableOWNER_NAZVA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OWNER_OWNER_ADR", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER_ADR.OWNER_IdColumn});
            this.tableOWNER_ADR.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OWNER_OWNER_PASS", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER_PASS.OWNER_IdColumn});
            this.tableOWNER_PASS.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OWNER_PR_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePR_UCH.OWNER_IdColumn});
            this.tablePR_UCH.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OWNER_OPR_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOPR_UCH.OWNER_IdColumn});
            this.tableOPR_UCH.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OWNER_GOL_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableGOL_UCH.OWNER_IdColumn});
            this.tableGOL_UCH.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OWNER_ZAG_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableZAG_UCH.OWNER_IdColumn});
            this.tableZAG_UCH.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("DECLARATION_PERE_GOLOS", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.DECLARATION_IdColumn});
            this.tablePERE_GOLOS.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PERE_GOLOS_TO_GL_OSOBA", new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.PERE_GOLOS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTO_GL_OSOBA.PERE_GOLOS_IdColumn});
            this.tableTO_GL_OSOBA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PERE_GOLOS_FROM_GL_OSOBA", new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.PERE_GOLOS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFROM_GL_OSOBA.PERE_GOLOS_IdColumn});
            this.tableFROM_GL_OSOBA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PERE_GOLOS_GL_NABUT", new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.PERE_GOLOS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableGL_NABUT.PERE_GOLOS_IdColumn});
            this.tableGL_NABUT.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("DECLARATION_SUM_BANK", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSUM_BANK.DECLARATION_IdColumn});
            this.tableSUM_BANK.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("DECLARATION_MAN_BANK", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMAN_BANK.DECLARATION_IdColumn});
            this.tableMAN_BANK.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MAN_BANK_MB_NAZVA", new global::System.Data.DataColumn[] {
                        this.tableMAN_BANK.MAN_BANK_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMB_NAZVA.MAN_BANK_IdColumn});
            this.tableMB_NAZVA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("MAN_BANK_MB_ISP_NAZVA", new global::System.Data.DataColumn[] {
                        this.tableMAN_BANK.MAN_BANK_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMB_ISP_NAZVA.MAN_BANK_IdColumn});
            this.tableMB_ISP_NAZVA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationDECLARATION_HEAD = new global::System.Data.DataRelation("DECLARATION_HEAD", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableHEAD.DECLARATION_IdColumn}, false);
            this.relationDECLARATION_HEAD.Nested = true;
            this.Relations.Add(this.relationDECLARATION_HEAD);
            this.relationDECLARATION_OWNER = new global::System.Data.DataRelation("DECLARATION_OWNER", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER.DECLARATION_IdColumn}, false);
            this.relationDECLARATION_OWNER.Nested = true;
            this.Relations.Add(this.relationDECLARATION_OWNER);
            this.relationOWNER_OWNER_NAZVA = new global::System.Data.DataRelation("OWNER_OWNER_NAZVA", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER_NAZVA.OWNER_IdColumn}, false);
            this.relationOWNER_OWNER_NAZVA.Nested = true;
            this.Relations.Add(this.relationOWNER_OWNER_NAZVA);
            this.relationOWNER_OWNER_ADR = new global::System.Data.DataRelation("OWNER_OWNER_ADR", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER_ADR.OWNER_IdColumn}, false);
            this.relationOWNER_OWNER_ADR.Nested = true;
            this.Relations.Add(this.relationOWNER_OWNER_ADR);
            this.relationOWNER_OWNER_PASS = new global::System.Data.DataRelation("OWNER_OWNER_PASS", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOWNER_PASS.OWNER_IdColumn}, false);
            this.relationOWNER_OWNER_PASS.Nested = true;
            this.Relations.Add(this.relationOWNER_OWNER_PASS);
            this.relationOWNER_PR_UCH = new global::System.Data.DataRelation("OWNER_PR_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePR_UCH.OWNER_IdColumn}, false);
            this.relationOWNER_PR_UCH.Nested = true;
            this.Relations.Add(this.relationOWNER_PR_UCH);
            this.relationOWNER_OPR_UCH = new global::System.Data.DataRelation("OWNER_OPR_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableOPR_UCH.OWNER_IdColumn}, false);
            this.relationOWNER_OPR_UCH.Nested = true;
            this.Relations.Add(this.relationOWNER_OPR_UCH);
            this.relationOWNER_GOL_UCH = new global::System.Data.DataRelation("OWNER_GOL_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableGOL_UCH.OWNER_IdColumn}, false);
            this.relationOWNER_GOL_UCH.Nested = true;
            this.Relations.Add(this.relationOWNER_GOL_UCH);
            this.relationOWNER_ZAG_UCH = new global::System.Data.DataRelation("OWNER_ZAG_UCH", new global::System.Data.DataColumn[] {
                        this.tableOWNER.OWNER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableZAG_UCH.OWNER_IdColumn}, false);
            this.relationOWNER_ZAG_UCH.Nested = true;
            this.Relations.Add(this.relationOWNER_ZAG_UCH);
            this.relationDECLARATION_PERE_GOLOS = new global::System.Data.DataRelation("DECLARATION_PERE_GOLOS", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.DECLARATION_IdColumn}, false);
            this.relationDECLARATION_PERE_GOLOS.Nested = true;
            this.Relations.Add(this.relationDECLARATION_PERE_GOLOS);
            this.relationPERE_GOLOS_TO_GL_OSOBA = new global::System.Data.DataRelation("PERE_GOLOS_TO_GL_OSOBA", new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.PERE_GOLOS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTO_GL_OSOBA.PERE_GOLOS_IdColumn}, false);
            this.relationPERE_GOLOS_TO_GL_OSOBA.Nested = true;
            this.Relations.Add(this.relationPERE_GOLOS_TO_GL_OSOBA);
            this.relationPERE_GOLOS_FROM_GL_OSOBA = new global::System.Data.DataRelation("PERE_GOLOS_FROM_GL_OSOBA", new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.PERE_GOLOS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFROM_GL_OSOBA.PERE_GOLOS_IdColumn}, false);
            this.relationPERE_GOLOS_FROM_GL_OSOBA.Nested = true;
            this.Relations.Add(this.relationPERE_GOLOS_FROM_GL_OSOBA);
            this.relationPERE_GOLOS_GL_NABUT = new global::System.Data.DataRelation("PERE_GOLOS_GL_NABUT", new global::System.Data.DataColumn[] {
                        this.tablePERE_GOLOS.PERE_GOLOS_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableGL_NABUT.PERE_GOLOS_IdColumn}, false);
            this.relationPERE_GOLOS_GL_NABUT.Nested = true;
            this.Relations.Add(this.relationPERE_GOLOS_GL_NABUT);
            this.relationDECLARATION_SUM_BANK = new global::System.Data.DataRelation("DECLARATION_SUM_BANK", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableSUM_BANK.DECLARATION_IdColumn}, false);
            this.relationDECLARATION_SUM_BANK.Nested = true;
            this.Relations.Add(this.relationDECLARATION_SUM_BANK);
            this.relationDECLARATION_MAN_BANK = new global::System.Data.DataRelation("DECLARATION_MAN_BANK", new global::System.Data.DataColumn[] {
                        this.tableDECLARATION.DECLARATION_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMAN_BANK.DECLARATION_IdColumn}, false);
            this.relationDECLARATION_MAN_BANK.Nested = true;
            this.Relations.Add(this.relationDECLARATION_MAN_BANK);
            this.relationMAN_BANK_MB_NAZVA = new global::System.Data.DataRelation("MAN_BANK_MB_NAZVA", new global::System.Data.DataColumn[] {
                        this.tableMAN_BANK.MAN_BANK_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMB_NAZVA.MAN_BANK_IdColumn}, false);
            this.relationMAN_BANK_MB_NAZVA.Nested = true;
            this.Relations.Add(this.relationMAN_BANK_MB_NAZVA);
            this.relationMAN_BANK_MB_ISP_NAZVA = new global::System.Data.DataRelation("MAN_BANK_MB_ISP_NAZVA", new global::System.Data.DataColumn[] {
                        this.tableMAN_BANK.MAN_BANK_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableMB_ISP_NAZVA.MAN_BANK_IdColumn}, false);
            this.relationMAN_BANK_MB_ISP_NAZVA.Nested = true;
            this.Relations.Add(this.relationMAN_BANK_MB_ISP_NAZVA);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDECLARATION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHEAD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOWNER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOWNER_NAZVA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOWNER_ADR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOWNER_PASS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePR_UCH() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOPR_UCH() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGOL_UCH() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeZAG_UCH() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePERE_GOLOS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTO_GL_OSOBA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFROM_GL_OSOBA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGL_NABUT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSUM_BANK() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMAN_BANK() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMB_NAZVA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMB_ISP_NAZVA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DECLARATIONRowChangeEventHandler(object sender, DECLARATIONRowChangeEvent e);
        
        public delegate void HEADRowChangeEventHandler(object sender, HEADRowChangeEvent e);
        
        public delegate void OWNERRowChangeEventHandler(object sender, OWNERRowChangeEvent e);
        
        public delegate void OWNER_NAZVARowChangeEventHandler(object sender, OWNER_NAZVARowChangeEvent e);
        
        public delegate void OWNER_ADRRowChangeEventHandler(object sender, OWNER_ADRRowChangeEvent e);
        
        public delegate void OWNER_PASSRowChangeEventHandler(object sender, OWNER_PASSRowChangeEvent e);
        
        public delegate void PR_UCHRowChangeEventHandler(object sender, PR_UCHRowChangeEvent e);
        
        public delegate void OPR_UCHRowChangeEventHandler(object sender, OPR_UCHRowChangeEvent e);
        
        public delegate void GOL_UCHRowChangeEventHandler(object sender, GOL_UCHRowChangeEvent e);
        
        public delegate void ZAG_UCHRowChangeEventHandler(object sender, ZAG_UCHRowChangeEvent e);
        
        public delegate void PERE_GOLOSRowChangeEventHandler(object sender, PERE_GOLOSRowChangeEvent e);
        
        public delegate void TO_GL_OSOBARowChangeEventHandler(object sender, TO_GL_OSOBARowChangeEvent e);
        
        public delegate void FROM_GL_OSOBARowChangeEventHandler(object sender, FROM_GL_OSOBARowChangeEvent e);
        
        public delegate void GL_NABUTRowChangeEventHandler(object sender, GL_NABUTRowChangeEvent e);
        
        public delegate void SUM_BANKRowChangeEventHandler(object sender, SUM_BANKRowChangeEvent e);
        
        public delegate void MAN_BANKRowChangeEventHandler(object sender, MAN_BANKRowChangeEvent e);
        
        public delegate void MB_NAZVARowChangeEventHandler(object sender, MB_NAZVARowChangeEvent e);
        
        public delegate void MB_ISP_NAZVARowChangeEventHandler(object sender, MB_ISP_NAZVARowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DECLARATIONDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnINF_DT;
            
            private global::System.Data.DataColumn columnTABLE_PIC;
            
            private global::System.Data.DataColumn columnPICTURE;
            
            private global::System.Data.DataColumn columnDECLARATION_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONDataTable() {
                this.TableName = "DECLARATION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DECLARATIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DECLARATIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INF_DTColumn {
                get {
                    return this.columnINF_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_PICColumn {
                get {
                    return this.columnTABLE_PIC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PICTUREColumn {
                get {
                    return this.columnPICTURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARATION_IdColumn {
                get {
                    return this.columnDECLARATION_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow this[int index] {
                get {
                    return ((DECLARATIONRow)(this.Rows[index]));
                }
            }
            
            public event DECLARATIONRowChangeEventHandler DECLARATIONRowChanging;
            
            public event DECLARATIONRowChangeEventHandler DECLARATIONRowChanged;
            
            public event DECLARATIONRowChangeEventHandler DECLARATIONRowDeleting;
            
            public event DECLARATIONRowChangeEventHandler DECLARATIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDECLARATIONRow(DECLARATIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow AddDECLARATIONRow(string INF_DT, byte[] TABLE_PIC, byte[] PICTURE) {
                DECLARATIONRow rowDECLARATIONRow = ((DECLARATIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        INF_DT,
                        TABLE_PIC,
                        PICTURE,
                        null};
                rowDECLARATIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDECLARATIONRow);
                return rowDECLARATIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DECLARATIONDataTable cln = ((DECLARATIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DECLARATIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnINF_DT = base.Columns["INF_DT"];
                this.columnTABLE_PIC = base.Columns["TABLE_PIC"];
                this.columnPICTURE = base.Columns["PICTURE"];
                this.columnDECLARATION_Id = base.Columns["DECLARATION_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnINF_DT = new global::System.Data.DataColumn("INF_DT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINF_DT);
                this.columnTABLE_PIC = new global::System.Data.DataColumn("TABLE_PIC", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_PIC);
                this.columnPICTURE = new global::System.Data.DataColumn("PICTURE", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPICTURE);
                this.columnDECLARATION_Id = new global::System.Data.DataColumn("DECLARATION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARATION_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDECLARATION_Id}, true));
                this.columnINF_DT.AllowDBNull = false;
                this.columnTABLE_PIC.AllowDBNull = false;
                this.columnPICTURE.AllowDBNull = false;
                this.columnDECLARATION_Id.AutoIncrement = true;
                this.columnDECLARATION_Id.AllowDBNull = false;
                this.columnDECLARATION_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow NewDECLARATIONRow() {
                return ((DECLARATIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DECLARATIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DECLARATIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DECLARATIONRowChanged != null)) {
                    this.DECLARATIONRowChanged(this, new DECLARATIONRowChangeEvent(((DECLARATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DECLARATIONRowChanging != null)) {
                    this.DECLARATIONRowChanging(this, new DECLARATIONRowChangeEvent(((DECLARATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DECLARATIONRowDeleted != null)) {
                    this.DECLARATIONRowDeleted(this, new DECLARATIONRowChangeEvent(((DECLARATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DECLARATIONRowDeleting != null)) {
                    this.DECLARATIONRowDeleting(this, new DECLARATIONRowChangeEvent(((DECLARATIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDECLARATIONRow(DECLARATIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DECLARATIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HEADDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFNAME;
            
            private global::System.Data.DataColumn columnEDRPOU;
            
            private global::System.Data.DataColumn columnIDBANK;
            
            private global::System.Data.DataColumn columnMFO;
            
            private global::System.Data.DataColumn columnCDTASK;
            
            private global::System.Data.DataColumn columnCDSUB;
            
            private global::System.Data.DataColumn columnCDFORM;
            
            private global::System.Data.DataColumn columnFILL_DATE;
            
            private global::System.Data.DataColumn columnFILL_TIME;
            
            private global::System.Data.DataColumn columnEI;
            
            private global::System.Data.DataColumn columnKU;
            
            private global::System.Data.DataColumn columnDECLARATION_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HEADDataTable() {
                this.TableName = "HEAD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HEADDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HEADDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNAMEColumn {
                get {
                    return this.columnFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EDRPOUColumn {
                get {
                    return this.columnEDRPOU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDBANKColumn {
                get {
                    return this.columnIDBANK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MFOColumn {
                get {
                    return this.columnMFO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CDTASKColumn {
                get {
                    return this.columnCDTASK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CDSUBColumn {
                get {
                    return this.columnCDSUB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CDFORMColumn {
                get {
                    return this.columnCDFORM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILL_DATEColumn {
                get {
                    return this.columnFILL_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILL_TIMEColumn {
                get {
                    return this.columnFILL_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EIColumn {
                get {
                    return this.columnEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KUColumn {
                get {
                    return this.columnKU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARATION_IdColumn {
                get {
                    return this.columnDECLARATION_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HEADRow this[int index] {
                get {
                    return ((HEADRow)(this.Rows[index]));
                }
            }
            
            public event HEADRowChangeEventHandler HEADRowChanging;
            
            public event HEADRowChangeEventHandler HEADRowChanged;
            
            public event HEADRowChangeEventHandler HEADRowDeleting;
            
            public event HEADRowChangeEventHandler HEADRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHEADRow(HEADRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HEADRow AddHEADRow(string FNAME, string EDRPOU, string IDBANK, long MFO, string CDTASK, string CDSUB, string CDFORM, string FILL_DATE, string FILL_TIME, string EI, long KU, DECLARATIONRow parentDECLARATIONRowByDECLARATION_HEAD) {
                HEADRow rowHEADRow = ((HEADRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FNAME,
                        EDRPOU,
                        IDBANK,
                        MFO,
                        CDTASK,
                        CDSUB,
                        CDFORM,
                        FILL_DATE,
                        FILL_TIME,
                        EI,
                        KU,
                        null};
                if ((parentDECLARATIONRowByDECLARATION_HEAD != null)) {
                    columnValuesArray[11] = parentDECLARATIONRowByDECLARATION_HEAD[3];
                }
                rowHEADRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHEADRow);
                return rowHEADRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HEADDataTable cln = ((HEADDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HEADDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFNAME = base.Columns["FNAME"];
                this.columnEDRPOU = base.Columns["EDRPOU"];
                this.columnIDBANK = base.Columns["IDBANK"];
                this.columnMFO = base.Columns["MFO"];
                this.columnCDTASK = base.Columns["CDTASK"];
                this.columnCDSUB = base.Columns["CDSUB"];
                this.columnCDFORM = base.Columns["CDFORM"];
                this.columnFILL_DATE = base.Columns["FILL_DATE"];
                this.columnFILL_TIME = base.Columns["FILL_TIME"];
                this.columnEI = base.Columns["EI"];
                this.columnKU = base.Columns["KU"];
                this.columnDECLARATION_Id = base.Columns["DECLARATION_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFNAME = new global::System.Data.DataColumn("FNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNAME);
                this.columnEDRPOU = new global::System.Data.DataColumn("EDRPOU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEDRPOU);
                this.columnIDBANK = new global::System.Data.DataColumn("IDBANK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDBANK);
                this.columnMFO = new global::System.Data.DataColumn("MFO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMFO);
                this.columnCDTASK = new global::System.Data.DataColumn("CDTASK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCDTASK);
                this.columnCDSUB = new global::System.Data.DataColumn("CDSUB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCDSUB);
                this.columnCDFORM = new global::System.Data.DataColumn("CDFORM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCDFORM);
                this.columnFILL_DATE = new global::System.Data.DataColumn("FILL_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILL_DATE);
                this.columnFILL_TIME = new global::System.Data.DataColumn("FILL_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILL_TIME);
                this.columnEI = new global::System.Data.DataColumn("EI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEI);
                this.columnKU = new global::System.Data.DataColumn("KU", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKU);
                this.columnDECLARATION_Id = new global::System.Data.DataColumn("DECLARATION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARATION_Id);
                this.columnFNAME.AllowDBNull = false;
                this.columnFNAME.MaxLength = 31;
                this.columnEDRPOU.AllowDBNull = false;
                this.columnEDRPOU.MaxLength = 10;
                this.columnCDTASK.AllowDBNull = false;
                this.columnCDSUB.MaxLength = 5;
                this.columnCDFORM.AllowDBNull = false;
                this.columnFILL_DATE.AllowDBNull = false;
                this.columnFILL_TIME.AllowDBNull = false;
                this.columnEI.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HEADRow NewHEADRow() {
                return ((HEADRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HEADRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HEADRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HEADRowChanged != null)) {
                    this.HEADRowChanged(this, new HEADRowChangeEvent(((HEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HEADRowChanging != null)) {
                    this.HEADRowChanging(this, new HEADRowChangeEvent(((HEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HEADRowDeleted != null)) {
                    this.HEADRowDeleted(this, new HEADRowChangeEvent(((HEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HEADRowDeleting != null)) {
                    this.HEADRowDeleting(this, new HEADRowChangeEvent(((HEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHEADRow(HEADRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HEADDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OWNERDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnROWNUM;
            
            private global::System.Data.DataColumn columnOWNER_TYPE;
            
            private global::System.Data.DataColumn columnOWNER_OZN;
            
            private global::System.Data.DataColumn columnOWNER_POS;
            
            private global::System.Data.DataColumn columnOWNER_DATE;
            
            private global::System.Data.DataColumn columnOWNER_DORG;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            private global::System.Data.DataColumn columnDECLARATION_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERDataTable() {
                this.TableName = "OWNER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OWNERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROWNUMColumn {
                get {
                    return this.columnROWNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_TYPEColumn {
                get {
                    return this.columnOWNER_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_OZNColumn {
                get {
                    return this.columnOWNER_OZN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_POSColumn {
                get {
                    return this.columnOWNER_POS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_DATEColumn {
                get {
                    return this.columnOWNER_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_DORGColumn {
                get {
                    return this.columnOWNER_DORG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARATION_IdColumn {
                get {
                    return this.columnDECLARATION_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow this[int index] {
                get {
                    return ((OWNERRow)(this.Rows[index]));
                }
            }
            
            public event OWNERRowChangeEventHandler OWNERRowChanging;
            
            public event OWNERRowChangeEventHandler OWNERRowChanged;
            
            public event OWNERRowChangeEventHandler OWNERRowDeleting;
            
            public event OWNERRowChangeEventHandler OWNERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOWNERRow(OWNERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow AddOWNERRow(int ROWNUM, decimal OWNER_TYPE, decimal OWNER_OZN, string OWNER_POS, string OWNER_DATE, string OWNER_DORG, DECLARATIONRow parentDECLARATIONRowByDECLARATION_OWNER) {
                OWNERRow rowOWNERRow = ((OWNERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ROWNUM,
                        OWNER_TYPE,
                        OWNER_OZN,
                        OWNER_POS,
                        OWNER_DATE,
                        OWNER_DORG,
                        null,
                        null};
                if ((parentDECLARATIONRowByDECLARATION_OWNER != null)) {
                    columnValuesArray[7] = parentDECLARATIONRowByDECLARATION_OWNER[3];
                }
                rowOWNERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOWNERRow);
                return rowOWNERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OWNERDataTable cln = ((OWNERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OWNERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnROWNUM = base.Columns["ROWNUM"];
                this.columnOWNER_TYPE = base.Columns["OWNER_TYPE"];
                this.columnOWNER_OZN = base.Columns["OWNER_OZN"];
                this.columnOWNER_POS = base.Columns["OWNER_POS"];
                this.columnOWNER_DATE = base.Columns["OWNER_DATE"];
                this.columnOWNER_DORG = base.Columns["OWNER_DORG"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
                this.columnDECLARATION_Id = base.Columns["DECLARATION_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnROWNUM = new global::System.Data.DataColumn("ROWNUM", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnROWNUM);
                this.columnOWNER_TYPE = new global::System.Data.DataColumn("OWNER_TYPE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER_TYPE);
                this.columnOWNER_OZN = new global::System.Data.DataColumn("OWNER_OZN", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER_OZN);
                this.columnOWNER_POS = new global::System.Data.DataColumn("OWNER_POS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER_POS);
                this.columnOWNER_DATE = new global::System.Data.DataColumn("OWNER_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER_DATE);
                this.columnOWNER_DORG = new global::System.Data.DataColumn("OWNER_DORG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER_DORG);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnDECLARATION_Id = new global::System.Data.DataColumn("DECLARATION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARATION_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOWNER_Id}, true));
                this.columnROWNUM.AllowDBNull = false;
                this.columnROWNUM.Namespace = "";
                this.columnOWNER_TYPE.AllowDBNull = false;
                this.columnOWNER_OZN.AllowDBNull = false;
                this.columnOWNER_Id.AutoIncrement = true;
                this.columnOWNER_Id.AllowDBNull = false;
                this.columnOWNER_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow NewOWNERRow() {
                return ((OWNERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OWNERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OWNERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OWNERRowChanged != null)) {
                    this.OWNERRowChanged(this, new OWNERRowChangeEvent(((OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OWNERRowChanging != null)) {
                    this.OWNERRowChanging(this, new OWNERRowChangeEvent(((OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OWNERRowDeleted != null)) {
                    this.OWNERRowDeleted(this, new OWNERRowChangeEvent(((OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OWNERRowDeleting != null)) {
                    this.OWNERRowDeleting(this, new OWNERRowChangeEvent(((OWNERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOWNERRow(OWNERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OWNERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OWNER_NAZVADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNT_COD;
            
            private global::System.Data.DataColumn columnNT_NM1;
            
            private global::System.Data.DataColumn columnNT_NM2;
            
            private global::System.Data.DataColumn columnNT_NM3;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_NAZVADataTable() {
                this.TableName = "OWNER_NAZVA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNER_NAZVADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OWNER_NAZVADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_CODColumn {
                get {
                    return this.columnNT_COD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM1Column {
                get {
                    return this.columnNT_NM1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM2Column {
                get {
                    return this.columnNT_NM2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM3Column {
                get {
                    return this.columnNT_NM3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_NAZVARow this[int index] {
                get {
                    return ((OWNER_NAZVARow)(this.Rows[index]));
                }
            }
            
            public event OWNER_NAZVARowChangeEventHandler OWNER_NAZVARowChanging;
            
            public event OWNER_NAZVARowChangeEventHandler OWNER_NAZVARowChanged;
            
            public event OWNER_NAZVARowChangeEventHandler OWNER_NAZVARowDeleting;
            
            public event OWNER_NAZVARowChangeEventHandler OWNER_NAZVARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOWNER_NAZVARow(OWNER_NAZVARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_NAZVARow AddOWNER_NAZVARow(string NT_COD, string NT_NM1, string NT_NM2, string NT_NM3, OWNERRow parentOWNERRowByOWNER_OWNER_NAZVA) {
                OWNER_NAZVARow rowOWNER_NAZVARow = ((OWNER_NAZVARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NT_COD,
                        NT_NM1,
                        NT_NM2,
                        NT_NM3,
                        null};
                if ((parentOWNERRowByOWNER_OWNER_NAZVA != null)) {
                    columnValuesArray[4] = parentOWNERRowByOWNER_OWNER_NAZVA[6];
                }
                rowOWNER_NAZVARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOWNER_NAZVARow);
                return rowOWNER_NAZVARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OWNER_NAZVADataTable cln = ((OWNER_NAZVADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OWNER_NAZVADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNT_COD = base.Columns["NT_COD"];
                this.columnNT_NM1 = base.Columns["NT_NM1"];
                this.columnNT_NM2 = base.Columns["NT_NM2"];
                this.columnNT_NM3 = base.Columns["NT_NM3"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNT_COD = new global::System.Data.DataColumn("NT_COD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_COD);
                this.columnNT_NM1 = new global::System.Data.DataColumn("NT_NM1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM1);
                this.columnNT_NM2 = new global::System.Data.DataColumn("NT_NM2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM2);
                this.columnNT_NM3 = new global::System.Data.DataColumn("NT_NM3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM3);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnNT_COD.AllowDBNull = false;
                this.columnNT_COD.MaxLength = 10;
                this.columnNT_NM1.AllowDBNull = false;
                this.columnNT_NM1.MaxLength = 254;
                this.columnNT_NM2.AllowDBNull = false;
                this.columnNT_NM2.MaxLength = 50;
                this.columnNT_NM3.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_NAZVARow NewOWNER_NAZVARow() {
                return ((OWNER_NAZVARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OWNER_NAZVARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OWNER_NAZVARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OWNER_NAZVARowChanged != null)) {
                    this.OWNER_NAZVARowChanged(this, new OWNER_NAZVARowChangeEvent(((OWNER_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OWNER_NAZVARowChanging != null)) {
                    this.OWNER_NAZVARowChanging(this, new OWNER_NAZVARowChangeEvent(((OWNER_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OWNER_NAZVARowDeleted != null)) {
                    this.OWNER_NAZVARowDeleted(this, new OWNER_NAZVARowChangeEvent(((OWNER_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OWNER_NAZVARowDeleting != null)) {
                    this.OWNER_NAZVARowDeleting(this, new OWNER_NAZVARowChangeEvent(((OWNER_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOWNER_NAZVARow(OWNER_NAZVARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OWNER_NAZVADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OWNER_ADRDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnADR_COD_KR;
            
            private global::System.Data.DataColumn columnADR_INDEX;
            
            private global::System.Data.DataColumn columnADR_PUNKT;
            
            private global::System.Data.DataColumn columnADR_UL;
            
            private global::System.Data.DataColumn columnADR_BUD;
            
            private global::System.Data.DataColumn columnADR_KORP;
            
            private global::System.Data.DataColumn columnADR_OFF;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_ADRDataTable() {
                this.TableName = "OWNER_ADR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNER_ADRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OWNER_ADRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADR_COD_KRColumn {
                get {
                    return this.columnADR_COD_KR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADR_INDEXColumn {
                get {
                    return this.columnADR_INDEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADR_PUNKTColumn {
                get {
                    return this.columnADR_PUNKT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADR_ULColumn {
                get {
                    return this.columnADR_UL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADR_BUDColumn {
                get {
                    return this.columnADR_BUD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADR_KORPColumn {
                get {
                    return this.columnADR_KORP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADR_OFFColumn {
                get {
                    return this.columnADR_OFF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_ADRRow this[int index] {
                get {
                    return ((OWNER_ADRRow)(this.Rows[index]));
                }
            }
            
            public event OWNER_ADRRowChangeEventHandler OWNER_ADRRowChanging;
            
            public event OWNER_ADRRowChangeEventHandler OWNER_ADRRowChanged;
            
            public event OWNER_ADRRowChangeEventHandler OWNER_ADRRowDeleting;
            
            public event OWNER_ADRRowChangeEventHandler OWNER_ADRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOWNER_ADRRow(OWNER_ADRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_ADRRow AddOWNER_ADRRow(string ADR_COD_KR, long ADR_INDEX, string ADR_PUNKT, string ADR_UL, string ADR_BUD, string ADR_KORP, string ADR_OFF, OWNERRow parentOWNERRowByOWNER_OWNER_ADR) {
                OWNER_ADRRow rowOWNER_ADRRow = ((OWNER_ADRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ADR_COD_KR,
                        ADR_INDEX,
                        ADR_PUNKT,
                        ADR_UL,
                        ADR_BUD,
                        ADR_KORP,
                        ADR_OFF,
                        null};
                if ((parentOWNERRowByOWNER_OWNER_ADR != null)) {
                    columnValuesArray[7] = parentOWNERRowByOWNER_OWNER_ADR[6];
                }
                rowOWNER_ADRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOWNER_ADRRow);
                return rowOWNER_ADRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OWNER_ADRDataTable cln = ((OWNER_ADRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OWNER_ADRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnADR_COD_KR = base.Columns["ADR_COD_KR"];
                this.columnADR_INDEX = base.Columns["ADR_INDEX"];
                this.columnADR_PUNKT = base.Columns["ADR_PUNKT"];
                this.columnADR_UL = base.Columns["ADR_UL"];
                this.columnADR_BUD = base.Columns["ADR_BUD"];
                this.columnADR_KORP = base.Columns["ADR_KORP"];
                this.columnADR_OFF = base.Columns["ADR_OFF"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnADR_COD_KR = new global::System.Data.DataColumn("ADR_COD_KR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADR_COD_KR);
                this.columnADR_INDEX = new global::System.Data.DataColumn("ADR_INDEX", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADR_INDEX);
                this.columnADR_PUNKT = new global::System.Data.DataColumn("ADR_PUNKT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADR_PUNKT);
                this.columnADR_UL = new global::System.Data.DataColumn("ADR_UL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADR_UL);
                this.columnADR_BUD = new global::System.Data.DataColumn("ADR_BUD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADR_BUD);
                this.columnADR_KORP = new global::System.Data.DataColumn("ADR_KORP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADR_KORP);
                this.columnADR_OFF = new global::System.Data.DataColumn("ADR_OFF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADR_OFF);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnADR_COD_KR.AllowDBNull = false;
                this.columnADR_INDEX.AllowDBNull = false;
                this.columnADR_PUNKT.AllowDBNull = false;
                this.columnADR_PUNKT.MaxLength = 50;
                this.columnADR_UL.AllowDBNull = false;
                this.columnADR_UL.MaxLength = 50;
                this.columnADR_BUD.AllowDBNull = false;
                this.columnADR_BUD.MaxLength = 10;
                this.columnADR_KORP.MaxLength = 10;
                this.columnADR_OFF.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_ADRRow NewOWNER_ADRRow() {
                return ((OWNER_ADRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OWNER_ADRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OWNER_ADRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OWNER_ADRRowChanged != null)) {
                    this.OWNER_ADRRowChanged(this, new OWNER_ADRRowChangeEvent(((OWNER_ADRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OWNER_ADRRowChanging != null)) {
                    this.OWNER_ADRRowChanging(this, new OWNER_ADRRowChangeEvent(((OWNER_ADRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OWNER_ADRRowDeleted != null)) {
                    this.OWNER_ADRRowDeleted(this, new OWNER_ADRRowChangeEvent(((OWNER_ADRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OWNER_ADRRowDeleting != null)) {
                    this.OWNER_ADRRowDeleting(this, new OWNER_ADRRowChangeEvent(((OWNER_ADRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOWNER_ADRRow(OWNER_ADRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OWNER_ADRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OWNER_PASSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPS_SR;
            
            private global::System.Data.DataColumn columnPS_NM;
            
            private global::System.Data.DataColumn columnPS_DT;
            
            private global::System.Data.DataColumn columnPS_ORG;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_PASSDataTable() {
                this.TableName = "OWNER_PASS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNER_PASSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OWNER_PASSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PS_SRColumn {
                get {
                    return this.columnPS_SR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PS_NMColumn {
                get {
                    return this.columnPS_NM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PS_DTColumn {
                get {
                    return this.columnPS_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PS_ORGColumn {
                get {
                    return this.columnPS_ORG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_PASSRow this[int index] {
                get {
                    return ((OWNER_PASSRow)(this.Rows[index]));
                }
            }
            
            public event OWNER_PASSRowChangeEventHandler OWNER_PASSRowChanging;
            
            public event OWNER_PASSRowChangeEventHandler OWNER_PASSRowChanged;
            
            public event OWNER_PASSRowChangeEventHandler OWNER_PASSRowDeleting;
            
            public event OWNER_PASSRowChangeEventHandler OWNER_PASSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOWNER_PASSRow(OWNER_PASSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_PASSRow AddOWNER_PASSRow(string PS_SR, decimal PS_NM, string PS_DT, string PS_ORG, OWNERRow parentOWNERRowByOWNER_OWNER_PASS) {
                OWNER_PASSRow rowOWNER_PASSRow = ((OWNER_PASSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PS_SR,
                        PS_NM,
                        PS_DT,
                        PS_ORG,
                        null};
                if ((parentOWNERRowByOWNER_OWNER_PASS != null)) {
                    columnValuesArray[4] = parentOWNERRowByOWNER_OWNER_PASS[6];
                }
                rowOWNER_PASSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOWNER_PASSRow);
                return rowOWNER_PASSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OWNER_PASSDataTable cln = ((OWNER_PASSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OWNER_PASSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPS_SR = base.Columns["PS_SR"];
                this.columnPS_NM = base.Columns["PS_NM"];
                this.columnPS_DT = base.Columns["PS_DT"];
                this.columnPS_ORG = base.Columns["PS_ORG"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPS_SR = new global::System.Data.DataColumn("PS_SR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPS_SR);
                this.columnPS_NM = new global::System.Data.DataColumn("PS_NM", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPS_NM);
                this.columnPS_DT = new global::System.Data.DataColumn("PS_DT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPS_DT);
                this.columnPS_ORG = new global::System.Data.DataColumn("PS_ORG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPS_ORG);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnPS_SR.AllowDBNull = false;
                this.columnPS_NM.AllowDBNull = false;
                this.columnPS_DT.AllowDBNull = false;
                this.columnPS_ORG.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_PASSRow NewOWNER_PASSRow() {
                return ((OWNER_PASSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OWNER_PASSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OWNER_PASSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OWNER_PASSRowChanged != null)) {
                    this.OWNER_PASSRowChanged(this, new OWNER_PASSRowChangeEvent(((OWNER_PASSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OWNER_PASSRowChanging != null)) {
                    this.OWNER_PASSRowChanging(this, new OWNER_PASSRowChangeEvent(((OWNER_PASSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OWNER_PASSRowDeleted != null)) {
                    this.OWNER_PASSRowDeleted(this, new OWNER_PASSRowChangeEvent(((OWNER_PASSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OWNER_PASSRowDeleting != null)) {
                    this.OWNER_PASSRowDeleting(this, new OWNER_PASSRowChangeEvent(((OWNER_PASSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOWNER_PASSRow(OWNER_PASSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OWNER_PASSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PR_UCHDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUT_VIDSOTOK;
            
            private global::System.Data.DataColumn columnUT_NOMINAL;
            
            private global::System.Data.DataColumn columnUT_GOLOSI;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PR_UCHDataTable() {
                this.TableName = "PR_UCH";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PR_UCHDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PR_UCHDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UT_VIDSOTOKColumn {
                get {
                    return this.columnUT_VIDSOTOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UT_NOMINALColumn {
                get {
                    return this.columnUT_NOMINAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UT_GOLOSIColumn {
                get {
                    return this.columnUT_GOLOSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PR_UCHRow this[int index] {
                get {
                    return ((PR_UCHRow)(this.Rows[index]));
                }
            }
            
            public event PR_UCHRowChangeEventHandler PR_UCHRowChanging;
            
            public event PR_UCHRowChangeEventHandler PR_UCHRowChanged;
            
            public event PR_UCHRowChangeEventHandler PR_UCHRowDeleting;
            
            public event PR_UCHRowChangeEventHandler PR_UCHRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPR_UCHRow(PR_UCHRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PR_UCHRow AddPR_UCHRow(decimal UT_VIDSOTOK, decimal UT_NOMINAL, decimal UT_GOLOSI, OWNERRow parentOWNERRowByOWNER_PR_UCH) {
                PR_UCHRow rowPR_UCHRow = ((PR_UCHRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UT_VIDSOTOK,
                        UT_NOMINAL,
                        UT_GOLOSI,
                        null};
                if ((parentOWNERRowByOWNER_PR_UCH != null)) {
                    columnValuesArray[3] = parentOWNERRowByOWNER_PR_UCH[6];
                }
                rowPR_UCHRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPR_UCHRow);
                return rowPR_UCHRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PR_UCHDataTable cln = ((PR_UCHDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PR_UCHDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUT_VIDSOTOK = base.Columns["UT_VIDSOTOK"];
                this.columnUT_NOMINAL = base.Columns["UT_NOMINAL"];
                this.columnUT_GOLOSI = base.Columns["UT_GOLOSI"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUT_VIDSOTOK = new global::System.Data.DataColumn("UT_VIDSOTOK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUT_VIDSOTOK);
                this.columnUT_NOMINAL = new global::System.Data.DataColumn("UT_NOMINAL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUT_NOMINAL);
                this.columnUT_GOLOSI = new global::System.Data.DataColumn("UT_GOLOSI", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUT_GOLOSI);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnUT_VIDSOTOK.AllowDBNull = false;
                this.columnUT_NOMINAL.AllowDBNull = false;
                this.columnUT_GOLOSI.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PR_UCHRow NewPR_UCHRow() {
                return ((PR_UCHRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PR_UCHRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PR_UCHRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PR_UCHRowChanged != null)) {
                    this.PR_UCHRowChanged(this, new PR_UCHRowChangeEvent(((PR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PR_UCHRowChanging != null)) {
                    this.PR_UCHRowChanging(this, new PR_UCHRowChangeEvent(((PR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PR_UCHRowDeleted != null)) {
                    this.PR_UCHRowDeleted(this, new PR_UCHRowChangeEvent(((PR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PR_UCHRowDeleting != null)) {
                    this.PR_UCHRowDeleting(this, new PR_UCHRowChangeEvent(((PR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePR_UCHRow(PR_UCHRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PR_UCHDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OPR_UCHDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUT_VIDSOTOK;
            
            private global::System.Data.DataColumn columnUT_NOMINAL;
            
            private global::System.Data.DataColumn columnUT_GOLOSI;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPR_UCHDataTable() {
                this.TableName = "OPR_UCH";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OPR_UCHDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OPR_UCHDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UT_VIDSOTOKColumn {
                get {
                    return this.columnUT_VIDSOTOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UT_NOMINALColumn {
                get {
                    return this.columnUT_NOMINAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UT_GOLOSIColumn {
                get {
                    return this.columnUT_GOLOSI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPR_UCHRow this[int index] {
                get {
                    return ((OPR_UCHRow)(this.Rows[index]));
                }
            }
            
            public event OPR_UCHRowChangeEventHandler OPR_UCHRowChanging;
            
            public event OPR_UCHRowChangeEventHandler OPR_UCHRowChanged;
            
            public event OPR_UCHRowChangeEventHandler OPR_UCHRowDeleting;
            
            public event OPR_UCHRowChangeEventHandler OPR_UCHRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOPR_UCHRow(OPR_UCHRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPR_UCHRow AddOPR_UCHRow(decimal UT_VIDSOTOK, decimal UT_NOMINAL, decimal UT_GOLOSI, OWNERRow parentOWNERRowByOWNER_OPR_UCH) {
                OPR_UCHRow rowOPR_UCHRow = ((OPR_UCHRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UT_VIDSOTOK,
                        UT_NOMINAL,
                        UT_GOLOSI,
                        null};
                if ((parentOWNERRowByOWNER_OPR_UCH != null)) {
                    columnValuesArray[3] = parentOWNERRowByOWNER_OPR_UCH[6];
                }
                rowOPR_UCHRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOPR_UCHRow);
                return rowOPR_UCHRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OPR_UCHDataTable cln = ((OPR_UCHDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OPR_UCHDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUT_VIDSOTOK = base.Columns["UT_VIDSOTOK"];
                this.columnUT_NOMINAL = base.Columns["UT_NOMINAL"];
                this.columnUT_GOLOSI = base.Columns["UT_GOLOSI"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUT_VIDSOTOK = new global::System.Data.DataColumn("UT_VIDSOTOK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUT_VIDSOTOK);
                this.columnUT_NOMINAL = new global::System.Data.DataColumn("UT_NOMINAL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUT_NOMINAL);
                this.columnUT_GOLOSI = new global::System.Data.DataColumn("UT_GOLOSI", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUT_GOLOSI);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnUT_VIDSOTOK.AllowDBNull = false;
                this.columnUT_NOMINAL.AllowDBNull = false;
                this.columnUT_GOLOSI.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPR_UCHRow NewOPR_UCHRow() {
                return ((OPR_UCHRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OPR_UCHRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OPR_UCHRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OPR_UCHRowChanged != null)) {
                    this.OPR_UCHRowChanged(this, new OPR_UCHRowChangeEvent(((OPR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OPR_UCHRowChanging != null)) {
                    this.OPR_UCHRowChanging(this, new OPR_UCHRowChangeEvent(((OPR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OPR_UCHRowDeleted != null)) {
                    this.OPR_UCHRowDeleted(this, new OPR_UCHRowChangeEvent(((OPR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OPR_UCHRowDeleting != null)) {
                    this.OPR_UCHRowDeleting(this, new OPR_UCHRowChangeEvent(((OPR_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOPR_UCHRow(OPR_UCHRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OPR_UCHDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GOL_UCHDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGT_VIDSOTOK;
            
            private global::System.Data.DataColumn columnGT_GOLOS;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GOL_UCHDataTable() {
                this.TableName = "GOL_UCH";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GOL_UCHDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GOL_UCHDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_VIDSOTOKColumn {
                get {
                    return this.columnGT_VIDSOTOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_GOLOSColumn {
                get {
                    return this.columnGT_GOLOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GOL_UCHRow this[int index] {
                get {
                    return ((GOL_UCHRow)(this.Rows[index]));
                }
            }
            
            public event GOL_UCHRowChangeEventHandler GOL_UCHRowChanging;
            
            public event GOL_UCHRowChangeEventHandler GOL_UCHRowChanged;
            
            public event GOL_UCHRowChangeEventHandler GOL_UCHRowDeleting;
            
            public event GOL_UCHRowChangeEventHandler GOL_UCHRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGOL_UCHRow(GOL_UCHRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GOL_UCHRow AddGOL_UCHRow(decimal GT_VIDSOTOK, decimal GT_GOLOS, OWNERRow parentOWNERRowByOWNER_GOL_UCH) {
                GOL_UCHRow rowGOL_UCHRow = ((GOL_UCHRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GT_VIDSOTOK,
                        GT_GOLOS,
                        null};
                if ((parentOWNERRowByOWNER_GOL_UCH != null)) {
                    columnValuesArray[2] = parentOWNERRowByOWNER_GOL_UCH[6];
                }
                rowGOL_UCHRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGOL_UCHRow);
                return rowGOL_UCHRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GOL_UCHDataTable cln = ((GOL_UCHDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GOL_UCHDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGT_VIDSOTOK = base.Columns["GT_VIDSOTOK"];
                this.columnGT_GOLOS = base.Columns["GT_GOLOS"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGT_VIDSOTOK = new global::System.Data.DataColumn("GT_VIDSOTOK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_VIDSOTOK);
                this.columnGT_GOLOS = new global::System.Data.DataColumn("GT_GOLOS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_GOLOS);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnGT_VIDSOTOK.AllowDBNull = false;
                this.columnGT_GOLOS.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GOL_UCHRow NewGOL_UCHRow() {
                return ((GOL_UCHRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GOL_UCHRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GOL_UCHRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GOL_UCHRowChanged != null)) {
                    this.GOL_UCHRowChanged(this, new GOL_UCHRowChangeEvent(((GOL_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GOL_UCHRowChanging != null)) {
                    this.GOL_UCHRowChanging(this, new GOL_UCHRowChangeEvent(((GOL_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GOL_UCHRowDeleted != null)) {
                    this.GOL_UCHRowDeleted(this, new GOL_UCHRowChangeEvent(((GOL_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GOL_UCHRowDeleting != null)) {
                    this.GOL_UCHRowDeleting(this, new GOL_UCHRowChangeEvent(((GOL_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGOL_UCHRow(GOL_UCHRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GOL_UCHDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZAG_UCHDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGT_VIDSOTOK;
            
            private global::System.Data.DataColumn columnGT_GOLOS;
            
            private global::System.Data.DataColumn columnOWNER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZAG_UCHDataTable() {
                this.TableName = "ZAG_UCH";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZAG_UCHDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ZAG_UCHDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_VIDSOTOKColumn {
                get {
                    return this.columnGT_VIDSOTOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_GOLOSColumn {
                get {
                    return this.columnGT_GOLOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER_IdColumn {
                get {
                    return this.columnOWNER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZAG_UCHRow this[int index] {
                get {
                    return ((ZAG_UCHRow)(this.Rows[index]));
                }
            }
            
            public event ZAG_UCHRowChangeEventHandler ZAG_UCHRowChanging;
            
            public event ZAG_UCHRowChangeEventHandler ZAG_UCHRowChanged;
            
            public event ZAG_UCHRowChangeEventHandler ZAG_UCHRowDeleting;
            
            public event ZAG_UCHRowChangeEventHandler ZAG_UCHRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddZAG_UCHRow(ZAG_UCHRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZAG_UCHRow AddZAG_UCHRow(decimal GT_VIDSOTOK, decimal GT_GOLOS, OWNERRow parentOWNERRowByOWNER_ZAG_UCH) {
                ZAG_UCHRow rowZAG_UCHRow = ((ZAG_UCHRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GT_VIDSOTOK,
                        GT_GOLOS,
                        null};
                if ((parentOWNERRowByOWNER_ZAG_UCH != null)) {
                    columnValuesArray[2] = parentOWNERRowByOWNER_ZAG_UCH[6];
                }
                rowZAG_UCHRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowZAG_UCHRow);
                return rowZAG_UCHRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ZAG_UCHDataTable cln = ((ZAG_UCHDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ZAG_UCHDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGT_VIDSOTOK = base.Columns["GT_VIDSOTOK"];
                this.columnGT_GOLOS = base.Columns["GT_GOLOS"];
                this.columnOWNER_Id = base.Columns["OWNER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGT_VIDSOTOK = new global::System.Data.DataColumn("GT_VIDSOTOK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_VIDSOTOK);
                this.columnGT_GOLOS = new global::System.Data.DataColumn("GT_GOLOS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_GOLOS);
                this.columnOWNER_Id = new global::System.Data.DataColumn("OWNER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnOWNER_Id);
                this.columnGT_VIDSOTOK.AllowDBNull = false;
                this.columnGT_GOLOS.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZAG_UCHRow NewZAG_UCHRow() {
                return ((ZAG_UCHRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ZAG_UCHRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ZAG_UCHRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZAG_UCHRowChanged != null)) {
                    this.ZAG_UCHRowChanged(this, new ZAG_UCHRowChangeEvent(((ZAG_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZAG_UCHRowChanging != null)) {
                    this.ZAG_UCHRowChanging(this, new ZAG_UCHRowChangeEvent(((ZAG_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZAG_UCHRowDeleted != null)) {
                    this.ZAG_UCHRowDeleted(this, new ZAG_UCHRowChangeEvent(((ZAG_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZAG_UCHRowDeleting != null)) {
                    this.ZAG_UCHRowDeleting(this, new ZAG_UCHRowChangeEvent(((ZAG_UCHRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveZAG_UCHRow(ZAG_UCHRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZAG_UCHDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PERE_GOLOSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnROWNUM;
            
            private global::System.Data.DataColumn columnGL_NOMER;
            
            private global::System.Data.DataColumn columnGL_DT;
            
            private global::System.Data.DataColumn columnGL_PRICH;
            
            private global::System.Data.DataColumn columnPERE_GOLOS_Id;
            
            private global::System.Data.DataColumn columnDECLARATION_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSDataTable() {
                this.TableName = "PERE_GOLOS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PERE_GOLOSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PERE_GOLOSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROWNUMColumn {
                get {
                    return this.columnROWNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GL_NOMERColumn {
                get {
                    return this.columnGL_NOMER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GL_DTColumn {
                get {
                    return this.columnGL_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GL_PRICHColumn {
                get {
                    return this.columnGL_PRICH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERE_GOLOS_IdColumn {
                get {
                    return this.columnPERE_GOLOS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARATION_IdColumn {
                get {
                    return this.columnDECLARATION_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow this[int index] {
                get {
                    return ((PERE_GOLOSRow)(this.Rows[index]));
                }
            }
            
            public event PERE_GOLOSRowChangeEventHandler PERE_GOLOSRowChanging;
            
            public event PERE_GOLOSRowChangeEventHandler PERE_GOLOSRowChanged;
            
            public event PERE_GOLOSRowChangeEventHandler PERE_GOLOSRowDeleting;
            
            public event PERE_GOLOSRowChangeEventHandler PERE_GOLOSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPERE_GOLOSRow(PERE_GOLOSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow AddPERE_GOLOSRow(int ROWNUM, string GL_NOMER, string GL_DT, string GL_PRICH, DECLARATIONRow parentDECLARATIONRowByDECLARATION_PERE_GOLOS) {
                PERE_GOLOSRow rowPERE_GOLOSRow = ((PERE_GOLOSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ROWNUM,
                        GL_NOMER,
                        GL_DT,
                        GL_PRICH,
                        null,
                        null};
                if ((parentDECLARATIONRowByDECLARATION_PERE_GOLOS != null)) {
                    columnValuesArray[5] = parentDECLARATIONRowByDECLARATION_PERE_GOLOS[3];
                }
                rowPERE_GOLOSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPERE_GOLOSRow);
                return rowPERE_GOLOSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PERE_GOLOSDataTable cln = ((PERE_GOLOSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PERE_GOLOSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnROWNUM = base.Columns["ROWNUM"];
                this.columnGL_NOMER = base.Columns["GL_NOMER"];
                this.columnGL_DT = base.Columns["GL_DT"];
                this.columnGL_PRICH = base.Columns["GL_PRICH"];
                this.columnPERE_GOLOS_Id = base.Columns["PERE_GOLOS_Id"];
                this.columnDECLARATION_Id = base.Columns["DECLARATION_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnROWNUM = new global::System.Data.DataColumn("ROWNUM", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnROWNUM);
                this.columnGL_NOMER = new global::System.Data.DataColumn("GL_NOMER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGL_NOMER);
                this.columnGL_DT = new global::System.Data.DataColumn("GL_DT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGL_DT);
                this.columnGL_PRICH = new global::System.Data.DataColumn("GL_PRICH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGL_PRICH);
                this.columnPERE_GOLOS_Id = new global::System.Data.DataColumn("PERE_GOLOS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPERE_GOLOS_Id);
                this.columnDECLARATION_Id = new global::System.Data.DataColumn("DECLARATION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARATION_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPERE_GOLOS_Id}, true));
                this.columnROWNUM.AllowDBNull = false;
                this.columnROWNUM.Namespace = "";
                this.columnGL_NOMER.AllowDBNull = false;
                this.columnGL_DT.AllowDBNull = false;
                this.columnGL_PRICH.AllowDBNull = false;
                this.columnPERE_GOLOS_Id.AutoIncrement = true;
                this.columnPERE_GOLOS_Id.AllowDBNull = false;
                this.columnPERE_GOLOS_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow NewPERE_GOLOSRow() {
                return ((PERE_GOLOSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PERE_GOLOSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PERE_GOLOSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PERE_GOLOSRowChanged != null)) {
                    this.PERE_GOLOSRowChanged(this, new PERE_GOLOSRowChangeEvent(((PERE_GOLOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PERE_GOLOSRowChanging != null)) {
                    this.PERE_GOLOSRowChanging(this, new PERE_GOLOSRowChangeEvent(((PERE_GOLOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PERE_GOLOSRowDeleted != null)) {
                    this.PERE_GOLOSRowDeleted(this, new PERE_GOLOSRowChangeEvent(((PERE_GOLOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PERE_GOLOSRowDeleting != null)) {
                    this.PERE_GOLOSRowDeleting(this, new PERE_GOLOSRowChangeEvent(((PERE_GOLOSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePERE_GOLOSRow(PERE_GOLOSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PERE_GOLOSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TO_GL_OSOBADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNT_COD;
            
            private global::System.Data.DataColumn columnNT_NM1;
            
            private global::System.Data.DataColumn columnNT_NM2;
            
            private global::System.Data.DataColumn columnNT_NM3;
            
            private global::System.Data.DataColumn columnPERE_GOLOS_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TO_GL_OSOBADataTable() {
                this.TableName = "TO_GL_OSOBA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TO_GL_OSOBADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TO_GL_OSOBADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_CODColumn {
                get {
                    return this.columnNT_COD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM1Column {
                get {
                    return this.columnNT_NM1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM2Column {
                get {
                    return this.columnNT_NM2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM3Column {
                get {
                    return this.columnNT_NM3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERE_GOLOS_IdColumn {
                get {
                    return this.columnPERE_GOLOS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TO_GL_OSOBARow this[int index] {
                get {
                    return ((TO_GL_OSOBARow)(this.Rows[index]));
                }
            }
            
            public event TO_GL_OSOBARowChangeEventHandler TO_GL_OSOBARowChanging;
            
            public event TO_GL_OSOBARowChangeEventHandler TO_GL_OSOBARowChanged;
            
            public event TO_GL_OSOBARowChangeEventHandler TO_GL_OSOBARowDeleting;
            
            public event TO_GL_OSOBARowChangeEventHandler TO_GL_OSOBARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTO_GL_OSOBARow(TO_GL_OSOBARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TO_GL_OSOBARow AddTO_GL_OSOBARow(string NT_COD, string NT_NM1, string NT_NM2, string NT_NM3, PERE_GOLOSRow parentPERE_GOLOSRowByPERE_GOLOS_TO_GL_OSOBA) {
                TO_GL_OSOBARow rowTO_GL_OSOBARow = ((TO_GL_OSOBARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NT_COD,
                        NT_NM1,
                        NT_NM2,
                        NT_NM3,
                        null};
                if ((parentPERE_GOLOSRowByPERE_GOLOS_TO_GL_OSOBA != null)) {
                    columnValuesArray[4] = parentPERE_GOLOSRowByPERE_GOLOS_TO_GL_OSOBA[4];
                }
                rowTO_GL_OSOBARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTO_GL_OSOBARow);
                return rowTO_GL_OSOBARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TO_GL_OSOBADataTable cln = ((TO_GL_OSOBADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TO_GL_OSOBADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNT_COD = base.Columns["NT_COD"];
                this.columnNT_NM1 = base.Columns["NT_NM1"];
                this.columnNT_NM2 = base.Columns["NT_NM2"];
                this.columnNT_NM3 = base.Columns["NT_NM3"];
                this.columnPERE_GOLOS_Id = base.Columns["PERE_GOLOS_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNT_COD = new global::System.Data.DataColumn("NT_COD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_COD);
                this.columnNT_NM1 = new global::System.Data.DataColumn("NT_NM1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM1);
                this.columnNT_NM2 = new global::System.Data.DataColumn("NT_NM2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM2);
                this.columnNT_NM3 = new global::System.Data.DataColumn("NT_NM3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM3);
                this.columnPERE_GOLOS_Id = new global::System.Data.DataColumn("PERE_GOLOS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPERE_GOLOS_Id);
                this.columnNT_COD.AllowDBNull = false;
                this.columnNT_COD.MaxLength = 10;
                this.columnNT_NM1.AllowDBNull = false;
                this.columnNT_NM1.MaxLength = 254;
                this.columnNT_NM2.AllowDBNull = false;
                this.columnNT_NM2.MaxLength = 50;
                this.columnNT_NM3.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TO_GL_OSOBARow NewTO_GL_OSOBARow() {
                return ((TO_GL_OSOBARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TO_GL_OSOBARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TO_GL_OSOBARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TO_GL_OSOBARowChanged != null)) {
                    this.TO_GL_OSOBARowChanged(this, new TO_GL_OSOBARowChangeEvent(((TO_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TO_GL_OSOBARowChanging != null)) {
                    this.TO_GL_OSOBARowChanging(this, new TO_GL_OSOBARowChangeEvent(((TO_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TO_GL_OSOBARowDeleted != null)) {
                    this.TO_GL_OSOBARowDeleted(this, new TO_GL_OSOBARowChangeEvent(((TO_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TO_GL_OSOBARowDeleting != null)) {
                    this.TO_GL_OSOBARowDeleting(this, new TO_GL_OSOBARowChangeEvent(((TO_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTO_GL_OSOBARow(TO_GL_OSOBARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TO_GL_OSOBADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FROM_GL_OSOBADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNT_COD;
            
            private global::System.Data.DataColumn columnNT_NM1;
            
            private global::System.Data.DataColumn columnNT_NM2;
            
            private global::System.Data.DataColumn columnNT_NM3;
            
            private global::System.Data.DataColumn columnPERE_GOLOS_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FROM_GL_OSOBADataTable() {
                this.TableName = "FROM_GL_OSOBA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FROM_GL_OSOBADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FROM_GL_OSOBADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_CODColumn {
                get {
                    return this.columnNT_COD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM1Column {
                get {
                    return this.columnNT_NM1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM2Column {
                get {
                    return this.columnNT_NM2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NT_NM3Column {
                get {
                    return this.columnNT_NM3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERE_GOLOS_IdColumn {
                get {
                    return this.columnPERE_GOLOS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FROM_GL_OSOBARow this[int index] {
                get {
                    return ((FROM_GL_OSOBARow)(this.Rows[index]));
                }
            }
            
            public event FROM_GL_OSOBARowChangeEventHandler FROM_GL_OSOBARowChanging;
            
            public event FROM_GL_OSOBARowChangeEventHandler FROM_GL_OSOBARowChanged;
            
            public event FROM_GL_OSOBARowChangeEventHandler FROM_GL_OSOBARowDeleting;
            
            public event FROM_GL_OSOBARowChangeEventHandler FROM_GL_OSOBARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFROM_GL_OSOBARow(FROM_GL_OSOBARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FROM_GL_OSOBARow AddFROM_GL_OSOBARow(string NT_COD, string NT_NM1, string NT_NM2, string NT_NM3, PERE_GOLOSRow parentPERE_GOLOSRowByPERE_GOLOS_FROM_GL_OSOBA) {
                FROM_GL_OSOBARow rowFROM_GL_OSOBARow = ((FROM_GL_OSOBARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NT_COD,
                        NT_NM1,
                        NT_NM2,
                        NT_NM3,
                        null};
                if ((parentPERE_GOLOSRowByPERE_GOLOS_FROM_GL_OSOBA != null)) {
                    columnValuesArray[4] = parentPERE_GOLOSRowByPERE_GOLOS_FROM_GL_OSOBA[4];
                }
                rowFROM_GL_OSOBARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFROM_GL_OSOBARow);
                return rowFROM_GL_OSOBARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FROM_GL_OSOBADataTable cln = ((FROM_GL_OSOBADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FROM_GL_OSOBADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNT_COD = base.Columns["NT_COD"];
                this.columnNT_NM1 = base.Columns["NT_NM1"];
                this.columnNT_NM2 = base.Columns["NT_NM2"];
                this.columnNT_NM3 = base.Columns["NT_NM3"];
                this.columnPERE_GOLOS_Id = base.Columns["PERE_GOLOS_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNT_COD = new global::System.Data.DataColumn("NT_COD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_COD);
                this.columnNT_NM1 = new global::System.Data.DataColumn("NT_NM1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM1);
                this.columnNT_NM2 = new global::System.Data.DataColumn("NT_NM2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM2);
                this.columnNT_NM3 = new global::System.Data.DataColumn("NT_NM3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNT_NM3);
                this.columnPERE_GOLOS_Id = new global::System.Data.DataColumn("PERE_GOLOS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPERE_GOLOS_Id);
                this.columnNT_COD.AllowDBNull = false;
                this.columnNT_COD.MaxLength = 10;
                this.columnNT_NM1.AllowDBNull = false;
                this.columnNT_NM1.MaxLength = 254;
                this.columnNT_NM2.AllowDBNull = false;
                this.columnNT_NM2.MaxLength = 50;
                this.columnNT_NM3.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FROM_GL_OSOBARow NewFROM_GL_OSOBARow() {
                return ((FROM_GL_OSOBARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FROM_GL_OSOBARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FROM_GL_OSOBARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FROM_GL_OSOBARowChanged != null)) {
                    this.FROM_GL_OSOBARowChanged(this, new FROM_GL_OSOBARowChangeEvent(((FROM_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FROM_GL_OSOBARowChanging != null)) {
                    this.FROM_GL_OSOBARowChanging(this, new FROM_GL_OSOBARowChangeEvent(((FROM_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FROM_GL_OSOBARowDeleted != null)) {
                    this.FROM_GL_OSOBARowDeleted(this, new FROM_GL_OSOBARowChangeEvent(((FROM_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FROM_GL_OSOBARowDeleting != null)) {
                    this.FROM_GL_OSOBARowDeleting(this, new FROM_GL_OSOBARowChangeEvent(((FROM_GL_OSOBARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFROM_GL_OSOBARow(FROM_GL_OSOBARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FROM_GL_OSOBADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GL_NABUTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGT_VIDSOTOK;
            
            private global::System.Data.DataColumn columnGT_GOLOS;
            
            private global::System.Data.DataColumn columnPERE_GOLOS_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GL_NABUTDataTable() {
                this.TableName = "GL_NABUT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GL_NABUTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GL_NABUTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_VIDSOTOKColumn {
                get {
                    return this.columnGT_VIDSOTOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_GOLOSColumn {
                get {
                    return this.columnGT_GOLOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PERE_GOLOS_IdColumn {
                get {
                    return this.columnPERE_GOLOS_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GL_NABUTRow this[int index] {
                get {
                    return ((GL_NABUTRow)(this.Rows[index]));
                }
            }
            
            public event GL_NABUTRowChangeEventHandler GL_NABUTRowChanging;
            
            public event GL_NABUTRowChangeEventHandler GL_NABUTRowChanged;
            
            public event GL_NABUTRowChangeEventHandler GL_NABUTRowDeleting;
            
            public event GL_NABUTRowChangeEventHandler GL_NABUTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGL_NABUTRow(GL_NABUTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GL_NABUTRow AddGL_NABUTRow(decimal GT_VIDSOTOK, decimal GT_GOLOS, PERE_GOLOSRow parentPERE_GOLOSRowByPERE_GOLOS_GL_NABUT) {
                GL_NABUTRow rowGL_NABUTRow = ((GL_NABUTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GT_VIDSOTOK,
                        GT_GOLOS,
                        null};
                if ((parentPERE_GOLOSRowByPERE_GOLOS_GL_NABUT != null)) {
                    columnValuesArray[2] = parentPERE_GOLOSRowByPERE_GOLOS_GL_NABUT[4];
                }
                rowGL_NABUTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGL_NABUTRow);
                return rowGL_NABUTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GL_NABUTDataTable cln = ((GL_NABUTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GL_NABUTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGT_VIDSOTOK = base.Columns["GT_VIDSOTOK"];
                this.columnGT_GOLOS = base.Columns["GT_GOLOS"];
                this.columnPERE_GOLOS_Id = base.Columns["PERE_GOLOS_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGT_VIDSOTOK = new global::System.Data.DataColumn("GT_VIDSOTOK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_VIDSOTOK);
                this.columnGT_GOLOS = new global::System.Data.DataColumn("GT_GOLOS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_GOLOS);
                this.columnPERE_GOLOS_Id = new global::System.Data.DataColumn("PERE_GOLOS_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPERE_GOLOS_Id);
                this.columnGT_VIDSOTOK.AllowDBNull = false;
                this.columnGT_GOLOS.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GL_NABUTRow NewGL_NABUTRow() {
                return ((GL_NABUTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GL_NABUTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GL_NABUTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GL_NABUTRowChanged != null)) {
                    this.GL_NABUTRowChanged(this, new GL_NABUTRowChangeEvent(((GL_NABUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GL_NABUTRowChanging != null)) {
                    this.GL_NABUTRowChanging(this, new GL_NABUTRowChangeEvent(((GL_NABUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GL_NABUTRowDeleted != null)) {
                    this.GL_NABUTRowDeleted(this, new GL_NABUTRowChangeEvent(((GL_NABUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GL_NABUTRowDeleting != null)) {
                    this.GL_NABUTRowDeleting(this, new GL_NABUTRowChangeEvent(((GL_NABUTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGL_NABUTRow(GL_NABUTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GL_NABUTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SUM_BANKDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnGT_VIDSOTOK;
            
            private global::System.Data.DataColumn columnGT_GOLOS;
            
            private global::System.Data.DataColumn columnDECLARATION_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUM_BANKDataTable() {
                this.TableName = "SUM_BANK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUM_BANKDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SUM_BANKDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_VIDSOTOKColumn {
                get {
                    return this.columnGT_VIDSOTOK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GT_GOLOSColumn {
                get {
                    return this.columnGT_GOLOS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARATION_IdColumn {
                get {
                    return this.columnDECLARATION_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUM_BANKRow this[int index] {
                get {
                    return ((SUM_BANKRow)(this.Rows[index]));
                }
            }
            
            public event SUM_BANKRowChangeEventHandler SUM_BANKRowChanging;
            
            public event SUM_BANKRowChangeEventHandler SUM_BANKRowChanged;
            
            public event SUM_BANKRowChangeEventHandler SUM_BANKRowDeleting;
            
            public event SUM_BANKRowChangeEventHandler SUM_BANKRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSUM_BANKRow(SUM_BANKRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUM_BANKRow AddSUM_BANKRow(decimal GT_VIDSOTOK, decimal GT_GOLOS, DECLARATIONRow parentDECLARATIONRowByDECLARATION_SUM_BANK) {
                SUM_BANKRow rowSUM_BANKRow = ((SUM_BANKRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        GT_VIDSOTOK,
                        GT_GOLOS,
                        null};
                if ((parentDECLARATIONRowByDECLARATION_SUM_BANK != null)) {
                    columnValuesArray[2] = parentDECLARATIONRowByDECLARATION_SUM_BANK[3];
                }
                rowSUM_BANKRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSUM_BANKRow);
                return rowSUM_BANKRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SUM_BANKDataTable cln = ((SUM_BANKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SUM_BANKDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGT_VIDSOTOK = base.Columns["GT_VIDSOTOK"];
                this.columnGT_GOLOS = base.Columns["GT_GOLOS"];
                this.columnDECLARATION_Id = base.Columns["DECLARATION_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGT_VIDSOTOK = new global::System.Data.DataColumn("GT_VIDSOTOK", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_VIDSOTOK);
                this.columnGT_GOLOS = new global::System.Data.DataColumn("GT_GOLOS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGT_GOLOS);
                this.columnDECLARATION_Id = new global::System.Data.DataColumn("DECLARATION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARATION_Id);
                this.columnGT_VIDSOTOK.AllowDBNull = false;
                this.columnGT_GOLOS.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUM_BANKRow NewSUM_BANKRow() {
                return ((SUM_BANKRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SUM_BANKRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SUM_BANKRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SUM_BANKRowChanged != null)) {
                    this.SUM_BANKRowChanged(this, new SUM_BANKRowChangeEvent(((SUM_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SUM_BANKRowChanging != null)) {
                    this.SUM_BANKRowChanging(this, new SUM_BANKRowChangeEvent(((SUM_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SUM_BANKRowDeleted != null)) {
                    this.SUM_BANKRowDeleted(this, new SUM_BANKRowChangeEvent(((SUM_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SUM_BANKRowDeleting != null)) {
                    this.SUM_BANKRowDeleting(this, new SUM_BANKRowChangeEvent(((SUM_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSUM_BANKRow(SUM_BANKRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SUM_BANKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MAN_BANKDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnMB_POS;
            
            private global::System.Data.DataColumn columnMB_DT;
            
            private global::System.Data.DataColumn columnMB_TLF;
            
            private global::System.Data.DataColumn columnMAN_BANK_Id;
            
            private global::System.Data.DataColumn columnDECLARATION_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKDataTable() {
                this.TableName = "MAN_BANK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MAN_BANKDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MAN_BANKDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MB_POSColumn {
                get {
                    return this.columnMB_POS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MB_DTColumn {
                get {
                    return this.columnMB_DT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MB_TLFColumn {
                get {
                    return this.columnMB_TLF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAN_BANK_IdColumn {
                get {
                    return this.columnMAN_BANK_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARATION_IdColumn {
                get {
                    return this.columnDECLARATION_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRow this[int index] {
                get {
                    return ((MAN_BANKRow)(this.Rows[index]));
                }
            }
            
            public event MAN_BANKRowChangeEventHandler MAN_BANKRowChanging;
            
            public event MAN_BANKRowChangeEventHandler MAN_BANKRowChanged;
            
            public event MAN_BANKRowChangeEventHandler MAN_BANKRowDeleting;
            
            public event MAN_BANKRowChangeEventHandler MAN_BANKRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMAN_BANKRow(MAN_BANKRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRow AddMAN_BANKRow(string MB_POS, string MB_DT, string MB_TLF, DECLARATIONRow parentDECLARATIONRowByDECLARATION_MAN_BANK) {
                MAN_BANKRow rowMAN_BANKRow = ((MAN_BANKRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MB_POS,
                        MB_DT,
                        MB_TLF,
                        null,
                        null};
                if ((parentDECLARATIONRowByDECLARATION_MAN_BANK != null)) {
                    columnValuesArray[4] = parentDECLARATIONRowByDECLARATION_MAN_BANK[3];
                }
                rowMAN_BANKRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMAN_BANKRow);
                return rowMAN_BANKRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MAN_BANKDataTable cln = ((MAN_BANKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MAN_BANKDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMB_POS = base.Columns["MB_POS"];
                this.columnMB_DT = base.Columns["MB_DT"];
                this.columnMB_TLF = base.Columns["MB_TLF"];
                this.columnMAN_BANK_Id = base.Columns["MAN_BANK_Id"];
                this.columnDECLARATION_Id = base.Columns["DECLARATION_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMB_POS = new global::System.Data.DataColumn("MB_POS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMB_POS);
                this.columnMB_DT = new global::System.Data.DataColumn("MB_DT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMB_DT);
                this.columnMB_TLF = new global::System.Data.DataColumn("MB_TLF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMB_TLF);
                this.columnMAN_BANK_Id = new global::System.Data.DataColumn("MAN_BANK_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMAN_BANK_Id);
                this.columnDECLARATION_Id = new global::System.Data.DataColumn("DECLARATION_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARATION_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAN_BANK_Id}, true));
                this.columnMB_DT.AllowDBNull = false;
                this.columnMB_TLF.AllowDBNull = false;
                this.columnMB_TLF.MaxLength = 50;
                this.columnMAN_BANK_Id.AutoIncrement = true;
                this.columnMAN_BANK_Id.AllowDBNull = false;
                this.columnMAN_BANK_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRow NewMAN_BANKRow() {
                return ((MAN_BANKRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MAN_BANKRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MAN_BANKRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MAN_BANKRowChanged != null)) {
                    this.MAN_BANKRowChanged(this, new MAN_BANKRowChangeEvent(((MAN_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MAN_BANKRowChanging != null)) {
                    this.MAN_BANKRowChanging(this, new MAN_BANKRowChangeEvent(((MAN_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MAN_BANKRowDeleted != null)) {
                    this.MAN_BANKRowDeleted(this, new MAN_BANKRowChangeEvent(((MAN_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MAN_BANKRowDeleting != null)) {
                    this.MAN_BANKRowDeleting(this, new MAN_BANKRowChangeEvent(((MAN_BANKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMAN_BANKRow(MAN_BANKRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MAN_BANKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MB_NAZVADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFIO_NM1;
            
            private global::System.Data.DataColumn columnFIO_NM2;
            
            private global::System.Data.DataColumn columnFIO_NM3;
            
            private global::System.Data.DataColumn columnMAN_BANK_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_NAZVADataTable() {
                this.TableName = "MB_NAZVA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MB_NAZVADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MB_NAZVADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIO_NM1Column {
                get {
                    return this.columnFIO_NM1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIO_NM2Column {
                get {
                    return this.columnFIO_NM2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIO_NM3Column {
                get {
                    return this.columnFIO_NM3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAN_BANK_IdColumn {
                get {
                    return this.columnMAN_BANK_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_NAZVARow this[int index] {
                get {
                    return ((MB_NAZVARow)(this.Rows[index]));
                }
            }
            
            public event MB_NAZVARowChangeEventHandler MB_NAZVARowChanging;
            
            public event MB_NAZVARowChangeEventHandler MB_NAZVARowChanged;
            
            public event MB_NAZVARowChangeEventHandler MB_NAZVARowDeleting;
            
            public event MB_NAZVARowChangeEventHandler MB_NAZVARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMB_NAZVARow(MB_NAZVARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_NAZVARow AddMB_NAZVARow(string FIO_NM1, string FIO_NM2, string FIO_NM3, MAN_BANKRow parentMAN_BANKRowByMAN_BANK_MB_NAZVA) {
                MB_NAZVARow rowMB_NAZVARow = ((MB_NAZVARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FIO_NM1,
                        FIO_NM2,
                        FIO_NM3,
                        null};
                if ((parentMAN_BANKRowByMAN_BANK_MB_NAZVA != null)) {
                    columnValuesArray[3] = parentMAN_BANKRowByMAN_BANK_MB_NAZVA[3];
                }
                rowMB_NAZVARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMB_NAZVARow);
                return rowMB_NAZVARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MB_NAZVADataTable cln = ((MB_NAZVADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MB_NAZVADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFIO_NM1 = base.Columns["FIO_NM1"];
                this.columnFIO_NM2 = base.Columns["FIO_NM2"];
                this.columnFIO_NM3 = base.Columns["FIO_NM3"];
                this.columnMAN_BANK_Id = base.Columns["MAN_BANK_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFIO_NM1 = new global::System.Data.DataColumn("FIO_NM1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIO_NM1);
                this.columnFIO_NM2 = new global::System.Data.DataColumn("FIO_NM2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIO_NM2);
                this.columnFIO_NM3 = new global::System.Data.DataColumn("FIO_NM3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIO_NM3);
                this.columnMAN_BANK_Id = new global::System.Data.DataColumn("MAN_BANK_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMAN_BANK_Id);
                this.columnFIO_NM1.AllowDBNull = false;
                this.columnFIO_NM1.MaxLength = 254;
                this.columnFIO_NM2.AllowDBNull = false;
                this.columnFIO_NM2.MaxLength = 50;
                this.columnFIO_NM3.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_NAZVARow NewMB_NAZVARow() {
                return ((MB_NAZVARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MB_NAZVARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MB_NAZVARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MB_NAZVARowChanged != null)) {
                    this.MB_NAZVARowChanged(this, new MB_NAZVARowChangeEvent(((MB_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MB_NAZVARowChanging != null)) {
                    this.MB_NAZVARowChanging(this, new MB_NAZVARowChangeEvent(((MB_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MB_NAZVARowDeleted != null)) {
                    this.MB_NAZVARowDeleted(this, new MB_NAZVARowChangeEvent(((MB_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MB_NAZVARowDeleting != null)) {
                    this.MB_NAZVARowDeleting(this, new MB_NAZVARowChangeEvent(((MB_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMB_NAZVARow(MB_NAZVARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MB_NAZVADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MB_ISP_NAZVADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFIO_NM1;
            
            private global::System.Data.DataColumn columnFIO_NM2;
            
            private global::System.Data.DataColumn columnFIO_NM3;
            
            private global::System.Data.DataColumn columnMAN_BANK_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_ISP_NAZVADataTable() {
                this.TableName = "MB_ISP_NAZVA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MB_ISP_NAZVADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MB_ISP_NAZVADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIO_NM1Column {
                get {
                    return this.columnFIO_NM1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIO_NM2Column {
                get {
                    return this.columnFIO_NM2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIO_NM3Column {
                get {
                    return this.columnFIO_NM3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAN_BANK_IdColumn {
                get {
                    return this.columnMAN_BANK_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_ISP_NAZVARow this[int index] {
                get {
                    return ((MB_ISP_NAZVARow)(this.Rows[index]));
                }
            }
            
            public event MB_ISP_NAZVARowChangeEventHandler MB_ISP_NAZVARowChanging;
            
            public event MB_ISP_NAZVARowChangeEventHandler MB_ISP_NAZVARowChanged;
            
            public event MB_ISP_NAZVARowChangeEventHandler MB_ISP_NAZVARowDeleting;
            
            public event MB_ISP_NAZVARowChangeEventHandler MB_ISP_NAZVARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMB_ISP_NAZVARow(MB_ISP_NAZVARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_ISP_NAZVARow AddMB_ISP_NAZVARow(string FIO_NM1, string FIO_NM2, string FIO_NM3, MAN_BANKRow parentMAN_BANKRowByMAN_BANK_MB_ISP_NAZVA) {
                MB_ISP_NAZVARow rowMB_ISP_NAZVARow = ((MB_ISP_NAZVARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FIO_NM1,
                        FIO_NM2,
                        FIO_NM3,
                        null};
                if ((parentMAN_BANKRowByMAN_BANK_MB_ISP_NAZVA != null)) {
                    columnValuesArray[3] = parentMAN_BANKRowByMAN_BANK_MB_ISP_NAZVA[3];
                }
                rowMB_ISP_NAZVARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMB_ISP_NAZVARow);
                return rowMB_ISP_NAZVARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MB_ISP_NAZVADataTable cln = ((MB_ISP_NAZVADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MB_ISP_NAZVADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFIO_NM1 = base.Columns["FIO_NM1"];
                this.columnFIO_NM2 = base.Columns["FIO_NM2"];
                this.columnFIO_NM3 = base.Columns["FIO_NM3"];
                this.columnMAN_BANK_Id = base.Columns["MAN_BANK_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFIO_NM1 = new global::System.Data.DataColumn("FIO_NM1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIO_NM1);
                this.columnFIO_NM2 = new global::System.Data.DataColumn("FIO_NM2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIO_NM2);
                this.columnFIO_NM3 = new global::System.Data.DataColumn("FIO_NM3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIO_NM3);
                this.columnMAN_BANK_Id = new global::System.Data.DataColumn("MAN_BANK_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnMAN_BANK_Id);
                this.columnFIO_NM1.AllowDBNull = false;
                this.columnFIO_NM1.MaxLength = 254;
                this.columnFIO_NM2.AllowDBNull = false;
                this.columnFIO_NM2.MaxLength = 50;
                this.columnFIO_NM3.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_ISP_NAZVARow NewMB_ISP_NAZVARow() {
                return ((MB_ISP_NAZVARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MB_ISP_NAZVARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MB_ISP_NAZVARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MB_ISP_NAZVARowChanged != null)) {
                    this.MB_ISP_NAZVARowChanged(this, new MB_ISP_NAZVARowChangeEvent(((MB_ISP_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MB_ISP_NAZVARowChanging != null)) {
                    this.MB_ISP_NAZVARowChanging(this, new MB_ISP_NAZVARowChangeEvent(((MB_ISP_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MB_ISP_NAZVARowDeleted != null)) {
                    this.MB_ISP_NAZVARowDeleted(this, new MB_ISP_NAZVARowChangeEvent(((MB_ISP_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MB_ISP_NAZVARowDeleting != null)) {
                    this.MB_ISP_NAZVARowDeleting(this, new MB_ISP_NAZVARowChangeEvent(((MB_ISP_NAZVARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMB_ISP_NAZVARow(MB_ISP_NAZVARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MB_ISP_NAZVADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DECLARATIONRow : global::System.Data.DataRow {
            
            private DECLARATIONDataTable tableDECLARATION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DECLARATIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDECLARATION = ((DECLARATIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INF_DT {
                get {
                    return ((string)(this[this.tableDECLARATION.INF_DTColumn]));
                }
                set {
                    this[this.tableDECLARATION.INF_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] TABLE_PIC {
                get {
                    return ((byte[])(this[this.tableDECLARATION.TABLE_PICColumn]));
                }
                set {
                    this[this.tableDECLARATION.TABLE_PICColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] PICTURE {
                get {
                    return ((byte[])(this[this.tableDECLARATION.PICTUREColumn]));
                }
                set {
                    this[this.tableDECLARATION.PICTUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARATION_Id {
                get {
                    return ((int)(this[this.tableDECLARATION.DECLARATION_IdColumn]));
                }
                set {
                    this[this.tableDECLARATION.DECLARATION_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HEADRow[] GetHEADRows() {
                if ((this.Table.ChildRelations["DECLARATION_HEAD"] == null)) {
                    return new HEADRow[0];
                }
                else {
                    return ((HEADRow[])(base.GetChildRows(this.Table.ChildRelations["DECLARATION_HEAD"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow[] GetOWNERRows() {
                if ((this.Table.ChildRelations["DECLARATION_OWNER"] == null)) {
                    return new OWNERRow[0];
                }
                else {
                    return ((OWNERRow[])(base.GetChildRows(this.Table.ChildRelations["DECLARATION_OWNER"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow[] GetPERE_GOLOSRows() {
                if ((this.Table.ChildRelations["DECLARATION_PERE_GOLOS"] == null)) {
                    return new PERE_GOLOSRow[0];
                }
                else {
                    return ((PERE_GOLOSRow[])(base.GetChildRows(this.Table.ChildRelations["DECLARATION_PERE_GOLOS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUM_BANKRow[] GetSUM_BANKRows() {
                if ((this.Table.ChildRelations["DECLARATION_SUM_BANK"] == null)) {
                    return new SUM_BANKRow[0];
                }
                else {
                    return ((SUM_BANKRow[])(base.GetChildRows(this.Table.ChildRelations["DECLARATION_SUM_BANK"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRow[] GetMAN_BANKRows() {
                if ((this.Table.ChildRelations["DECLARATION_MAN_BANK"] == null)) {
                    return new MAN_BANKRow[0];
                }
                else {
                    return ((MAN_BANKRow[])(base.GetChildRows(this.Table.ChildRelations["DECLARATION_MAN_BANK"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HEADRow : global::System.Data.DataRow {
            
            private HEADDataTable tableHEAD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HEADRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHEAD = ((HEADDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNAME {
                get {
                    return ((string)(this[this.tableHEAD.FNAMEColumn]));
                }
                set {
                    this[this.tableHEAD.FNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EDRPOU {
                get {
                    return ((string)(this[this.tableHEAD.EDRPOUColumn]));
                }
                set {
                    this[this.tableHEAD.EDRPOUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDBANK {
                get {
                    try {
                        return ((string)(this[this.tableHEAD.IDBANKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDBANK\' in table \'HEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHEAD.IDBANKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MFO {
                get {
                    try {
                        return ((long)(this[this.tableHEAD.MFOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MFO\' in table \'HEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHEAD.MFOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDTASK {
                get {
                    return ((string)(this[this.tableHEAD.CDTASKColumn]));
                }
                set {
                    this[this.tableHEAD.CDTASKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDSUB {
                get {
                    try {
                        return ((string)(this[this.tableHEAD.CDSUBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CDSUB\' in table \'HEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHEAD.CDSUBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDFORM {
                get {
                    return ((string)(this[this.tableHEAD.CDFORMColumn]));
                }
                set {
                    this[this.tableHEAD.CDFORMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILL_DATE {
                get {
                    return ((string)(this[this.tableHEAD.FILL_DATEColumn]));
                }
                set {
                    this[this.tableHEAD.FILL_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILL_TIME {
                get {
                    return ((string)(this[this.tableHEAD.FILL_TIMEColumn]));
                }
                set {
                    this[this.tableHEAD.FILL_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EI {
                get {
                    try {
                        return ((string)(this[this.tableHEAD.EIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EI\' in table \'HEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHEAD.EIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long KU {
                get {
                    try {
                        return ((long)(this[this.tableHEAD.KUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KU\' in table \'HEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHEAD.KUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARATION_Id {
                get {
                    try {
                        return ((int)(this[this.tableHEAD.DECLARATION_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DECLARATION_Id\' in table \'HEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHEAD.DECLARATION_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow DECLARATIONRow {
                get {
                    return ((DECLARATIONRow)(this.GetParentRow(this.Table.ParentRelations["DECLARATION_HEAD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DECLARATION_HEAD"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDBANKNull() {
                return this.IsNull(this.tableHEAD.IDBANKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDBANKNull() {
                this[this.tableHEAD.IDBANKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMFONull() {
                return this.IsNull(this.tableHEAD.MFOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMFONull() {
                this[this.tableHEAD.MFOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCDSUBNull() {
                return this.IsNull(this.tableHEAD.CDSUBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCDSUBNull() {
                this[this.tableHEAD.CDSUBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEINull() {
                return this.IsNull(this.tableHEAD.EIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEINull() {
                this[this.tableHEAD.EIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKUNull() {
                return this.IsNull(this.tableHEAD.KUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKUNull() {
                this[this.tableHEAD.KUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDECLARATION_IdNull() {
                return this.IsNull(this.tableHEAD.DECLARATION_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDECLARATION_IdNull() {
                this[this.tableHEAD.DECLARATION_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OWNERRow : global::System.Data.DataRow {
            
            private OWNERDataTable tableOWNER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOWNER = ((OWNERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ROWNUM {
                get {
                    return ((int)(this[this.tableOWNER.ROWNUMColumn]));
                }
                set {
                    this[this.tableOWNER.ROWNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OWNER_TYPE {
                get {
                    return ((decimal)(this[this.tableOWNER.OWNER_TYPEColumn]));
                }
                set {
                    this[this.tableOWNER.OWNER_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OWNER_OZN {
                get {
                    return ((decimal)(this[this.tableOWNER.OWNER_OZNColumn]));
                }
                set {
                    this[this.tableOWNER.OWNER_OZNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNER_POS {
                get {
                    try {
                        return ((string)(this[this.tableOWNER.OWNER_POSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_POS\' in table \'OWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER.OWNER_POSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNER_DATE {
                get {
                    try {
                        return ((string)(this[this.tableOWNER.OWNER_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_DATE\' in table \'OWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER.OWNER_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNER_DORG {
                get {
                    try {
                        return ((string)(this[this.tableOWNER.OWNER_DORGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_DORG\' in table \'OWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER.OWNER_DORGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    return ((int)(this[this.tableOWNER.OWNER_IdColumn]));
                }
                set {
                    this[this.tableOWNER.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARATION_Id {
                get {
                    try {
                        return ((int)(this[this.tableOWNER.DECLARATION_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DECLARATION_Id\' in table \'OWNER\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER.DECLARATION_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow DECLARATIONRow {
                get {
                    return ((DECLARATIONRow)(this.GetParentRow(this.Table.ParentRelations["DECLARATION_OWNER"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DECLARATION_OWNER"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_POSNull() {
                return this.IsNull(this.tableOWNER.OWNER_POSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_POSNull() {
                this[this.tableOWNER.OWNER_POSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_DATENull() {
                return this.IsNull(this.tableOWNER.OWNER_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_DATENull() {
                this[this.tableOWNER.OWNER_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_DORGNull() {
                return this.IsNull(this.tableOWNER.OWNER_DORGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_DORGNull() {
                this[this.tableOWNER.OWNER_DORGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDECLARATION_IdNull() {
                return this.IsNull(this.tableOWNER.DECLARATION_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDECLARATION_IdNull() {
                this[this.tableOWNER.DECLARATION_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_NAZVARow[] GetOWNER_NAZVARows() {
                if ((this.Table.ChildRelations["OWNER_OWNER_NAZVA"] == null)) {
                    return new OWNER_NAZVARow[0];
                }
                else {
                    return ((OWNER_NAZVARow[])(base.GetChildRows(this.Table.ChildRelations["OWNER_OWNER_NAZVA"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_ADRRow[] GetOWNER_ADRRows() {
                if ((this.Table.ChildRelations["OWNER_OWNER_ADR"] == null)) {
                    return new OWNER_ADRRow[0];
                }
                else {
                    return ((OWNER_ADRRow[])(base.GetChildRows(this.Table.ChildRelations["OWNER_OWNER_ADR"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_PASSRow[] GetOWNER_PASSRows() {
                if ((this.Table.ChildRelations["OWNER_OWNER_PASS"] == null)) {
                    return new OWNER_PASSRow[0];
                }
                else {
                    return ((OWNER_PASSRow[])(base.GetChildRows(this.Table.ChildRelations["OWNER_OWNER_PASS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PR_UCHRow[] GetPR_UCHRows() {
                if ((this.Table.ChildRelations["OWNER_PR_UCH"] == null)) {
                    return new PR_UCHRow[0];
                }
                else {
                    return ((PR_UCHRow[])(base.GetChildRows(this.Table.ChildRelations["OWNER_PR_UCH"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPR_UCHRow[] GetOPR_UCHRows() {
                if ((this.Table.ChildRelations["OWNER_OPR_UCH"] == null)) {
                    return new OPR_UCHRow[0];
                }
                else {
                    return ((OPR_UCHRow[])(base.GetChildRows(this.Table.ChildRelations["OWNER_OPR_UCH"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GOL_UCHRow[] GetGOL_UCHRows() {
                if ((this.Table.ChildRelations["OWNER_GOL_UCH"] == null)) {
                    return new GOL_UCHRow[0];
                }
                else {
                    return ((GOL_UCHRow[])(base.GetChildRows(this.Table.ChildRelations["OWNER_GOL_UCH"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZAG_UCHRow[] GetZAG_UCHRows() {
                if ((this.Table.ChildRelations["OWNER_ZAG_UCH"] == null)) {
                    return new ZAG_UCHRow[0];
                }
                else {
                    return ((ZAG_UCHRow[])(base.GetChildRows(this.Table.ChildRelations["OWNER_ZAG_UCH"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OWNER_NAZVARow : global::System.Data.DataRow {
            
            private OWNER_NAZVADataTable tableOWNER_NAZVA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNER_NAZVARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOWNER_NAZVA = ((OWNER_NAZVADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_COD {
                get {
                    return ((string)(this[this.tableOWNER_NAZVA.NT_CODColumn]));
                }
                set {
                    this[this.tableOWNER_NAZVA.NT_CODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM1 {
                get {
                    return ((string)(this[this.tableOWNER_NAZVA.NT_NM1Column]));
                }
                set {
                    this[this.tableOWNER_NAZVA.NT_NM1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM2 {
                get {
                    return ((string)(this[this.tableOWNER_NAZVA.NT_NM2Column]));
                }
                set {
                    this[this.tableOWNER_NAZVA.NT_NM2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM3 {
                get {
                    try {
                        return ((string)(this[this.tableOWNER_NAZVA.NT_NM3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NT_NM3\' in table \'OWNER_NAZVA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER_NAZVA.NT_NM3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    try {
                        return ((int)(this[this.tableOWNER_NAZVA.OWNER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_Id\' in table \'OWNER_NAZVA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER_NAZVA.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow OWNERRow {
                get {
                    return ((OWNERRow)(this.GetParentRow(this.Table.ParentRelations["OWNER_OWNER_NAZVA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OWNER_OWNER_NAZVA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNT_NM3Null() {
                return this.IsNull(this.tableOWNER_NAZVA.NT_NM3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNT_NM3Null() {
                this[this.tableOWNER_NAZVA.NT_NM3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_IdNull() {
                return this.IsNull(this.tableOWNER_NAZVA.OWNER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_IdNull() {
                this[this.tableOWNER_NAZVA.OWNER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OWNER_ADRRow : global::System.Data.DataRow {
            
            private OWNER_ADRDataTable tableOWNER_ADR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNER_ADRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOWNER_ADR = ((OWNER_ADRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADR_COD_KR {
                get {
                    return ((string)(this[this.tableOWNER_ADR.ADR_COD_KRColumn]));
                }
                set {
                    this[this.tableOWNER_ADR.ADR_COD_KRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ADR_INDEX {
                get {
                    return ((long)(this[this.tableOWNER_ADR.ADR_INDEXColumn]));
                }
                set {
                    this[this.tableOWNER_ADR.ADR_INDEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADR_PUNKT {
                get {
                    return ((string)(this[this.tableOWNER_ADR.ADR_PUNKTColumn]));
                }
                set {
                    this[this.tableOWNER_ADR.ADR_PUNKTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADR_UL {
                get {
                    return ((string)(this[this.tableOWNER_ADR.ADR_ULColumn]));
                }
                set {
                    this[this.tableOWNER_ADR.ADR_ULColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADR_BUD {
                get {
                    return ((string)(this[this.tableOWNER_ADR.ADR_BUDColumn]));
                }
                set {
                    this[this.tableOWNER_ADR.ADR_BUDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADR_KORP {
                get {
                    try {
                        return ((string)(this[this.tableOWNER_ADR.ADR_KORPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADR_KORP\' in table \'OWNER_ADR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER_ADR.ADR_KORPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADR_OFF {
                get {
                    try {
                        return ((string)(this[this.tableOWNER_ADR.ADR_OFFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADR_OFF\' in table \'OWNER_ADR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER_ADR.ADR_OFFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    try {
                        return ((int)(this[this.tableOWNER_ADR.OWNER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_Id\' in table \'OWNER_ADR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER_ADR.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow OWNERRow {
                get {
                    return ((OWNERRow)(this.GetParentRow(this.Table.ParentRelations["OWNER_OWNER_ADR"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OWNER_OWNER_ADR"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADR_KORPNull() {
                return this.IsNull(this.tableOWNER_ADR.ADR_KORPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADR_KORPNull() {
                this[this.tableOWNER_ADR.ADR_KORPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADR_OFFNull() {
                return this.IsNull(this.tableOWNER_ADR.ADR_OFFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADR_OFFNull() {
                this[this.tableOWNER_ADR.ADR_OFFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_IdNull() {
                return this.IsNull(this.tableOWNER_ADR.OWNER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_IdNull() {
                this[this.tableOWNER_ADR.OWNER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OWNER_PASSRow : global::System.Data.DataRow {
            
            private OWNER_PASSDataTable tableOWNER_PASS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OWNER_PASSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOWNER_PASS = ((OWNER_PASSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PS_SR {
                get {
                    return ((string)(this[this.tableOWNER_PASS.PS_SRColumn]));
                }
                set {
                    this[this.tableOWNER_PASS.PS_SRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PS_NM {
                get {
                    return ((decimal)(this[this.tableOWNER_PASS.PS_NMColumn]));
                }
                set {
                    this[this.tableOWNER_PASS.PS_NMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PS_DT {
                get {
                    return ((string)(this[this.tableOWNER_PASS.PS_DTColumn]));
                }
                set {
                    this[this.tableOWNER_PASS.PS_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PS_ORG {
                get {
                    return ((string)(this[this.tableOWNER_PASS.PS_ORGColumn]));
                }
                set {
                    this[this.tableOWNER_PASS.PS_ORGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    try {
                        return ((int)(this[this.tableOWNER_PASS.OWNER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_Id\' in table \'OWNER_PASS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOWNER_PASS.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow OWNERRow {
                get {
                    return ((OWNERRow)(this.GetParentRow(this.Table.ParentRelations["OWNER_OWNER_PASS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OWNER_OWNER_PASS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_IdNull() {
                return this.IsNull(this.tableOWNER_PASS.OWNER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_IdNull() {
                this[this.tableOWNER_PASS.OWNER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PR_UCHRow : global::System.Data.DataRow {
            
            private PR_UCHDataTable tablePR_UCH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PR_UCHRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePR_UCH = ((PR_UCHDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UT_VIDSOTOK {
                get {
                    return ((decimal)(this[this.tablePR_UCH.UT_VIDSOTOKColumn]));
                }
                set {
                    this[this.tablePR_UCH.UT_VIDSOTOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UT_NOMINAL {
                get {
                    return ((decimal)(this[this.tablePR_UCH.UT_NOMINALColumn]));
                }
                set {
                    this[this.tablePR_UCH.UT_NOMINALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UT_GOLOSI {
                get {
                    return ((decimal)(this[this.tablePR_UCH.UT_GOLOSIColumn]));
                }
                set {
                    this[this.tablePR_UCH.UT_GOLOSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    try {
                        return ((int)(this[this.tablePR_UCH.OWNER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_Id\' in table \'PR_UCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePR_UCH.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow OWNERRow {
                get {
                    return ((OWNERRow)(this.GetParentRow(this.Table.ParentRelations["OWNER_PR_UCH"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OWNER_PR_UCH"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_IdNull() {
                return this.IsNull(this.tablePR_UCH.OWNER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_IdNull() {
                this[this.tablePR_UCH.OWNER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OPR_UCHRow : global::System.Data.DataRow {
            
            private OPR_UCHDataTable tableOPR_UCH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OPR_UCHRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOPR_UCH = ((OPR_UCHDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UT_VIDSOTOK {
                get {
                    return ((decimal)(this[this.tableOPR_UCH.UT_VIDSOTOKColumn]));
                }
                set {
                    this[this.tableOPR_UCH.UT_VIDSOTOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UT_NOMINAL {
                get {
                    return ((decimal)(this[this.tableOPR_UCH.UT_NOMINALColumn]));
                }
                set {
                    this[this.tableOPR_UCH.UT_NOMINALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UT_GOLOSI {
                get {
                    return ((decimal)(this[this.tableOPR_UCH.UT_GOLOSIColumn]));
                }
                set {
                    this[this.tableOPR_UCH.UT_GOLOSIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    try {
                        return ((int)(this[this.tableOPR_UCH.OWNER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_Id\' in table \'OPR_UCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOPR_UCH.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow OWNERRow {
                get {
                    return ((OWNERRow)(this.GetParentRow(this.Table.ParentRelations["OWNER_OPR_UCH"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OWNER_OPR_UCH"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_IdNull() {
                return this.IsNull(this.tableOPR_UCH.OWNER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_IdNull() {
                this[this.tableOPR_UCH.OWNER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GOL_UCHRow : global::System.Data.DataRow {
            
            private GOL_UCHDataTable tableGOL_UCH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GOL_UCHRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGOL_UCH = ((GOL_UCHDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_VIDSOTOK {
                get {
                    return ((decimal)(this[this.tableGOL_UCH.GT_VIDSOTOKColumn]));
                }
                set {
                    this[this.tableGOL_UCH.GT_VIDSOTOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_GOLOS {
                get {
                    return ((decimal)(this[this.tableGOL_UCH.GT_GOLOSColumn]));
                }
                set {
                    this[this.tableGOL_UCH.GT_GOLOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    try {
                        return ((int)(this[this.tableGOL_UCH.OWNER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_Id\' in table \'GOL_UCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGOL_UCH.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow OWNERRow {
                get {
                    return ((OWNERRow)(this.GetParentRow(this.Table.ParentRelations["OWNER_GOL_UCH"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OWNER_GOL_UCH"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_IdNull() {
                return this.IsNull(this.tableGOL_UCH.OWNER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_IdNull() {
                this[this.tableGOL_UCH.OWNER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ZAG_UCHRow : global::System.Data.DataRow {
            
            private ZAG_UCHDataTable tableZAG_UCH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZAG_UCHRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZAG_UCH = ((ZAG_UCHDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_VIDSOTOK {
                get {
                    return ((decimal)(this[this.tableZAG_UCH.GT_VIDSOTOKColumn]));
                }
                set {
                    this[this.tableZAG_UCH.GT_VIDSOTOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_GOLOS {
                get {
                    return ((decimal)(this[this.tableZAG_UCH.GT_GOLOSColumn]));
                }
                set {
                    this[this.tableZAG_UCH.GT_GOLOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OWNER_Id {
                get {
                    try {
                        return ((int)(this[this.tableZAG_UCH.OWNER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER_Id\' in table \'ZAG_UCH\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableZAG_UCH.OWNER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow OWNERRow {
                get {
                    return ((OWNERRow)(this.GetParentRow(this.Table.ParentRelations["OWNER_ZAG_UCH"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OWNER_ZAG_UCH"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER_IdNull() {
                return this.IsNull(this.tableZAG_UCH.OWNER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER_IdNull() {
                this[this.tableZAG_UCH.OWNER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PERE_GOLOSRow : global::System.Data.DataRow {
            
            private PERE_GOLOSDataTable tablePERE_GOLOS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PERE_GOLOSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePERE_GOLOS = ((PERE_GOLOSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ROWNUM {
                get {
                    return ((int)(this[this.tablePERE_GOLOS.ROWNUMColumn]));
                }
                set {
                    this[this.tablePERE_GOLOS.ROWNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GL_NOMER {
                get {
                    return ((string)(this[this.tablePERE_GOLOS.GL_NOMERColumn]));
                }
                set {
                    this[this.tablePERE_GOLOS.GL_NOMERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GL_DT {
                get {
                    return ((string)(this[this.tablePERE_GOLOS.GL_DTColumn]));
                }
                set {
                    this[this.tablePERE_GOLOS.GL_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GL_PRICH {
                get {
                    return ((string)(this[this.tablePERE_GOLOS.GL_PRICHColumn]));
                }
                set {
                    this[this.tablePERE_GOLOS.GL_PRICHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PERE_GOLOS_Id {
                get {
                    return ((int)(this[this.tablePERE_GOLOS.PERE_GOLOS_IdColumn]));
                }
                set {
                    this[this.tablePERE_GOLOS.PERE_GOLOS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARATION_Id {
                get {
                    try {
                        return ((int)(this[this.tablePERE_GOLOS.DECLARATION_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DECLARATION_Id\' in table \'PERE_GOLOS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePERE_GOLOS.DECLARATION_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow DECLARATIONRow {
                get {
                    return ((DECLARATIONRow)(this.GetParentRow(this.Table.ParentRelations["DECLARATION_PERE_GOLOS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DECLARATION_PERE_GOLOS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDECLARATION_IdNull() {
                return this.IsNull(this.tablePERE_GOLOS.DECLARATION_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDECLARATION_IdNull() {
                this[this.tablePERE_GOLOS.DECLARATION_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TO_GL_OSOBARow[] GetTO_GL_OSOBARows() {
                if ((this.Table.ChildRelations["PERE_GOLOS_TO_GL_OSOBA"] == null)) {
                    return new TO_GL_OSOBARow[0];
                }
                else {
                    return ((TO_GL_OSOBARow[])(base.GetChildRows(this.Table.ChildRelations["PERE_GOLOS_TO_GL_OSOBA"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FROM_GL_OSOBARow[] GetFROM_GL_OSOBARows() {
                if ((this.Table.ChildRelations["PERE_GOLOS_FROM_GL_OSOBA"] == null)) {
                    return new FROM_GL_OSOBARow[0];
                }
                else {
                    return ((FROM_GL_OSOBARow[])(base.GetChildRows(this.Table.ChildRelations["PERE_GOLOS_FROM_GL_OSOBA"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GL_NABUTRow[] GetGL_NABUTRows() {
                if ((this.Table.ChildRelations["PERE_GOLOS_GL_NABUT"] == null)) {
                    return new GL_NABUTRow[0];
                }
                else {
                    return ((GL_NABUTRow[])(base.GetChildRows(this.Table.ChildRelations["PERE_GOLOS_GL_NABUT"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TO_GL_OSOBARow : global::System.Data.DataRow {
            
            private TO_GL_OSOBADataTable tableTO_GL_OSOBA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TO_GL_OSOBARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTO_GL_OSOBA = ((TO_GL_OSOBADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_COD {
                get {
                    return ((string)(this[this.tableTO_GL_OSOBA.NT_CODColumn]));
                }
                set {
                    this[this.tableTO_GL_OSOBA.NT_CODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM1 {
                get {
                    return ((string)(this[this.tableTO_GL_OSOBA.NT_NM1Column]));
                }
                set {
                    this[this.tableTO_GL_OSOBA.NT_NM1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM2 {
                get {
                    return ((string)(this[this.tableTO_GL_OSOBA.NT_NM2Column]));
                }
                set {
                    this[this.tableTO_GL_OSOBA.NT_NM2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM3 {
                get {
                    try {
                        return ((string)(this[this.tableTO_GL_OSOBA.NT_NM3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NT_NM3\' in table \'TO_GL_OSOBA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTO_GL_OSOBA.NT_NM3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PERE_GOLOS_Id {
                get {
                    try {
                        return ((int)(this[this.tableTO_GL_OSOBA.PERE_GOLOS_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PERE_GOLOS_Id\' in table \'TO_GL_OSOBA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTO_GL_OSOBA.PERE_GOLOS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow PERE_GOLOSRow {
                get {
                    return ((PERE_GOLOSRow)(this.GetParentRow(this.Table.ParentRelations["PERE_GOLOS_TO_GL_OSOBA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PERE_GOLOS_TO_GL_OSOBA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNT_NM3Null() {
                return this.IsNull(this.tableTO_GL_OSOBA.NT_NM3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNT_NM3Null() {
                this[this.tableTO_GL_OSOBA.NT_NM3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPERE_GOLOS_IdNull() {
                return this.IsNull(this.tableTO_GL_OSOBA.PERE_GOLOS_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPERE_GOLOS_IdNull() {
                this[this.tableTO_GL_OSOBA.PERE_GOLOS_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FROM_GL_OSOBARow : global::System.Data.DataRow {
            
            private FROM_GL_OSOBADataTable tableFROM_GL_OSOBA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FROM_GL_OSOBARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFROM_GL_OSOBA = ((FROM_GL_OSOBADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_COD {
                get {
                    return ((string)(this[this.tableFROM_GL_OSOBA.NT_CODColumn]));
                }
                set {
                    this[this.tableFROM_GL_OSOBA.NT_CODColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM1 {
                get {
                    return ((string)(this[this.tableFROM_GL_OSOBA.NT_NM1Column]));
                }
                set {
                    this[this.tableFROM_GL_OSOBA.NT_NM1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM2 {
                get {
                    return ((string)(this[this.tableFROM_GL_OSOBA.NT_NM2Column]));
                }
                set {
                    this[this.tableFROM_GL_OSOBA.NT_NM2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NT_NM3 {
                get {
                    try {
                        return ((string)(this[this.tableFROM_GL_OSOBA.NT_NM3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NT_NM3\' in table \'FROM_GL_OSOBA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFROM_GL_OSOBA.NT_NM3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PERE_GOLOS_Id {
                get {
                    try {
                        return ((int)(this[this.tableFROM_GL_OSOBA.PERE_GOLOS_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PERE_GOLOS_Id\' in table \'FROM_GL_OSOBA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFROM_GL_OSOBA.PERE_GOLOS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow PERE_GOLOSRow {
                get {
                    return ((PERE_GOLOSRow)(this.GetParentRow(this.Table.ParentRelations["PERE_GOLOS_FROM_GL_OSOBA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PERE_GOLOS_FROM_GL_OSOBA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNT_NM3Null() {
                return this.IsNull(this.tableFROM_GL_OSOBA.NT_NM3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNT_NM3Null() {
                this[this.tableFROM_GL_OSOBA.NT_NM3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPERE_GOLOS_IdNull() {
                return this.IsNull(this.tableFROM_GL_OSOBA.PERE_GOLOS_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPERE_GOLOS_IdNull() {
                this[this.tableFROM_GL_OSOBA.PERE_GOLOS_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GL_NABUTRow : global::System.Data.DataRow {
            
            private GL_NABUTDataTable tableGL_NABUT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GL_NABUTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGL_NABUT = ((GL_NABUTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_VIDSOTOK {
                get {
                    return ((decimal)(this[this.tableGL_NABUT.GT_VIDSOTOKColumn]));
                }
                set {
                    this[this.tableGL_NABUT.GT_VIDSOTOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_GOLOS {
                get {
                    return ((decimal)(this[this.tableGL_NABUT.GT_GOLOSColumn]));
                }
                set {
                    this[this.tableGL_NABUT.GT_GOLOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PERE_GOLOS_Id {
                get {
                    try {
                        return ((int)(this[this.tableGL_NABUT.PERE_GOLOS_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PERE_GOLOS_Id\' in table \'GL_NABUT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGL_NABUT.PERE_GOLOS_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow PERE_GOLOSRow {
                get {
                    return ((PERE_GOLOSRow)(this.GetParentRow(this.Table.ParentRelations["PERE_GOLOS_GL_NABUT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PERE_GOLOS_GL_NABUT"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPERE_GOLOS_IdNull() {
                return this.IsNull(this.tableGL_NABUT.PERE_GOLOS_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPERE_GOLOS_IdNull() {
                this[this.tableGL_NABUT.PERE_GOLOS_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SUM_BANKRow : global::System.Data.DataRow {
            
            private SUM_BANKDataTable tableSUM_BANK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SUM_BANKRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSUM_BANK = ((SUM_BANKDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_VIDSOTOK {
                get {
                    return ((decimal)(this[this.tableSUM_BANK.GT_VIDSOTOKColumn]));
                }
                set {
                    this[this.tableSUM_BANK.GT_VIDSOTOKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GT_GOLOS {
                get {
                    return ((decimal)(this[this.tableSUM_BANK.GT_GOLOSColumn]));
                }
                set {
                    this[this.tableSUM_BANK.GT_GOLOSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARATION_Id {
                get {
                    try {
                        return ((int)(this[this.tableSUM_BANK.DECLARATION_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DECLARATION_Id\' in table \'SUM_BANK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSUM_BANK.DECLARATION_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow DECLARATIONRow {
                get {
                    return ((DECLARATIONRow)(this.GetParentRow(this.Table.ParentRelations["DECLARATION_SUM_BANK"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DECLARATION_SUM_BANK"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDECLARATION_IdNull() {
                return this.IsNull(this.tableSUM_BANK.DECLARATION_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDECLARATION_IdNull() {
                this[this.tableSUM_BANK.DECLARATION_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MAN_BANKRow : global::System.Data.DataRow {
            
            private MAN_BANKDataTable tableMAN_BANK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MAN_BANKRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMAN_BANK = ((MAN_BANKDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MB_POS {
                get {
                    try {
                        return ((string)(this[this.tableMAN_BANK.MB_POSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MB_POS\' in table \'MAN_BANK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMAN_BANK.MB_POSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MB_DT {
                get {
                    return ((string)(this[this.tableMAN_BANK.MB_DTColumn]));
                }
                set {
                    this[this.tableMAN_BANK.MB_DTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MB_TLF {
                get {
                    return ((string)(this[this.tableMAN_BANK.MB_TLFColumn]));
                }
                set {
                    this[this.tableMAN_BANK.MB_TLFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAN_BANK_Id {
                get {
                    return ((int)(this[this.tableMAN_BANK.MAN_BANK_IdColumn]));
                }
                set {
                    this[this.tableMAN_BANK.MAN_BANK_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARATION_Id {
                get {
                    try {
                        return ((int)(this[this.tableMAN_BANK.DECLARATION_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DECLARATION_Id\' in table \'MAN_BANK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMAN_BANK.DECLARATION_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow DECLARATIONRow {
                get {
                    return ((DECLARATIONRow)(this.GetParentRow(this.Table.ParentRelations["DECLARATION_MAN_BANK"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DECLARATION_MAN_BANK"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMB_POSNull() {
                return this.IsNull(this.tableMAN_BANK.MB_POSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMB_POSNull() {
                this[this.tableMAN_BANK.MB_POSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDECLARATION_IdNull() {
                return this.IsNull(this.tableMAN_BANK.DECLARATION_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDECLARATION_IdNull() {
                this[this.tableMAN_BANK.DECLARATION_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_NAZVARow[] GetMB_NAZVARows() {
                if ((this.Table.ChildRelations["MAN_BANK_MB_NAZVA"] == null)) {
                    return new MB_NAZVARow[0];
                }
                else {
                    return ((MB_NAZVARow[])(base.GetChildRows(this.Table.ChildRelations["MAN_BANK_MB_NAZVA"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_ISP_NAZVARow[] GetMB_ISP_NAZVARows() {
                if ((this.Table.ChildRelations["MAN_BANK_MB_ISP_NAZVA"] == null)) {
                    return new MB_ISP_NAZVARow[0];
                }
                else {
                    return ((MB_ISP_NAZVARow[])(base.GetChildRows(this.Table.ChildRelations["MAN_BANK_MB_ISP_NAZVA"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MB_NAZVARow : global::System.Data.DataRow {
            
            private MB_NAZVADataTable tableMB_NAZVA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MB_NAZVARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMB_NAZVA = ((MB_NAZVADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIO_NM1 {
                get {
                    return ((string)(this[this.tableMB_NAZVA.FIO_NM1Column]));
                }
                set {
                    this[this.tableMB_NAZVA.FIO_NM1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIO_NM2 {
                get {
                    return ((string)(this[this.tableMB_NAZVA.FIO_NM2Column]));
                }
                set {
                    this[this.tableMB_NAZVA.FIO_NM2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIO_NM3 {
                get {
                    try {
                        return ((string)(this[this.tableMB_NAZVA.FIO_NM3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIO_NM3\' in table \'MB_NAZVA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMB_NAZVA.FIO_NM3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAN_BANK_Id {
                get {
                    try {
                        return ((int)(this[this.tableMB_NAZVA.MAN_BANK_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAN_BANK_Id\' in table \'MB_NAZVA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMB_NAZVA.MAN_BANK_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRow MAN_BANKRow {
                get {
                    return ((MAN_BANKRow)(this.GetParentRow(this.Table.ParentRelations["MAN_BANK_MB_NAZVA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MAN_BANK_MB_NAZVA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIO_NM3Null() {
                return this.IsNull(this.tableMB_NAZVA.FIO_NM3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIO_NM3Null() {
                this[this.tableMB_NAZVA.FIO_NM3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAN_BANK_IdNull() {
                return this.IsNull(this.tableMB_NAZVA.MAN_BANK_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAN_BANK_IdNull() {
                this[this.tableMB_NAZVA.MAN_BANK_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MB_ISP_NAZVARow : global::System.Data.DataRow {
            
            private MB_ISP_NAZVADataTable tableMB_ISP_NAZVA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MB_ISP_NAZVARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMB_ISP_NAZVA = ((MB_ISP_NAZVADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIO_NM1 {
                get {
                    return ((string)(this[this.tableMB_ISP_NAZVA.FIO_NM1Column]));
                }
                set {
                    this[this.tableMB_ISP_NAZVA.FIO_NM1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIO_NM2 {
                get {
                    return ((string)(this[this.tableMB_ISP_NAZVA.FIO_NM2Column]));
                }
                set {
                    this[this.tableMB_ISP_NAZVA.FIO_NM2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIO_NM3 {
                get {
                    try {
                        return ((string)(this[this.tableMB_ISP_NAZVA.FIO_NM3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIO_NM3\' in table \'MB_ISP_NAZVA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMB_ISP_NAZVA.FIO_NM3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAN_BANK_Id {
                get {
                    try {
                        return ((int)(this[this.tableMB_ISP_NAZVA.MAN_BANK_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAN_BANK_Id\' in table \'MB_ISP_NAZVA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMB_ISP_NAZVA.MAN_BANK_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRow MAN_BANKRow {
                get {
                    return ((MAN_BANKRow)(this.GetParentRow(this.Table.ParentRelations["MAN_BANK_MB_ISP_NAZVA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MAN_BANK_MB_ISP_NAZVA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIO_NM3Null() {
                return this.IsNull(this.tableMB_ISP_NAZVA.FIO_NM3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIO_NM3Null() {
                this[this.tableMB_ISP_NAZVA.FIO_NM3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAN_BANK_IdNull() {
                return this.IsNull(this.tableMB_ISP_NAZVA.MAN_BANK_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAN_BANK_IdNull() {
                this[this.tableMB_ISP_NAZVA.MAN_BANK_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DECLARATIONRowChangeEvent : global::System.EventArgs {
            
            private DECLARATIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRowChangeEvent(DECLARATIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARATIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HEADRowChangeEvent : global::System.EventArgs {
            
            private HEADRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HEADRowChangeEvent(HEADRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HEADRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OWNERRowChangeEvent : global::System.EventArgs {
            
            private OWNERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRowChangeEvent(OWNERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OWNER_NAZVARowChangeEvent : global::System.EventArgs {
            
            private OWNER_NAZVARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_NAZVARowChangeEvent(OWNER_NAZVARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_NAZVARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OWNER_ADRRowChangeEvent : global::System.EventArgs {
            
            private OWNER_ADRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_ADRRowChangeEvent(OWNER_ADRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_ADRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OWNER_PASSRowChangeEvent : global::System.EventArgs {
            
            private OWNER_PASSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_PASSRowChangeEvent(OWNER_PASSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OWNER_PASSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PR_UCHRowChangeEvent : global::System.EventArgs {
            
            private PR_UCHRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PR_UCHRowChangeEvent(PR_UCHRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PR_UCHRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OPR_UCHRowChangeEvent : global::System.EventArgs {
            
            private OPR_UCHRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPR_UCHRowChangeEvent(OPR_UCHRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OPR_UCHRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GOL_UCHRowChangeEvent : global::System.EventArgs {
            
            private GOL_UCHRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GOL_UCHRowChangeEvent(GOL_UCHRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GOL_UCHRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ZAG_UCHRowChangeEvent : global::System.EventArgs {
            
            private ZAG_UCHRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZAG_UCHRowChangeEvent(ZAG_UCHRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZAG_UCHRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PERE_GOLOSRowChangeEvent : global::System.EventArgs {
            
            private PERE_GOLOSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRowChangeEvent(PERE_GOLOSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PERE_GOLOSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TO_GL_OSOBARowChangeEvent : global::System.EventArgs {
            
            private TO_GL_OSOBARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TO_GL_OSOBARowChangeEvent(TO_GL_OSOBARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TO_GL_OSOBARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FROM_GL_OSOBARowChangeEvent : global::System.EventArgs {
            
            private FROM_GL_OSOBARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FROM_GL_OSOBARowChangeEvent(FROM_GL_OSOBARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FROM_GL_OSOBARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GL_NABUTRowChangeEvent : global::System.EventArgs {
            
            private GL_NABUTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GL_NABUTRowChangeEvent(GL_NABUTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GL_NABUTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SUM_BANKRowChangeEvent : global::System.EventArgs {
            
            private SUM_BANKRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUM_BANKRowChangeEvent(SUM_BANKRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SUM_BANKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MAN_BANKRowChangeEvent : global::System.EventArgs {
            
            private MAN_BANKRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRowChangeEvent(MAN_BANKRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAN_BANKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MB_NAZVARowChangeEvent : global::System.EventArgs {
            
            private MB_NAZVARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_NAZVARowChangeEvent(MB_NAZVARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_NAZVARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MB_ISP_NAZVARowChangeEvent : global::System.EventArgs {
            
            private MB_ISP_NAZVARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_ISP_NAZVARowChangeEvent(MB_ISP_NAZVARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MB_ISP_NAZVARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
