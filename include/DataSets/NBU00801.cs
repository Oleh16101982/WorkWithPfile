//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3649
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace _20131111_P7File {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DECLARATION")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DECLARATION : global::System.Data.DataSet {
        
        private KVIHEADDataTable tableKVIHEAD;
        
        private DOCHEADDataTable tableDOCHEAD;
        
        private DECLARBODYDataTable tableDECLARBODY;
        
        private INF_ERRDataTable tableINF_ERR;
        
        private ERR_REKDataTable tableERR_REK;
        
        private ERR_KODDataTable tableERR_KOD;
        
        private global::System.Data.DataRelation relationKVIHEAD_DOCHEAD;
        
        private global::System.Data.DataRelation relationDECLARBODY_INF_ERR;
        
        private global::System.Data.DataRelation relationINF_ERR_ERR_REK;
        
        private global::System.Data.DataRelation relationINF_ERR_ERR_KOD;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DECLARATION() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DECLARATION(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["KVIHEAD"] != null)) {
                    base.Tables.Add(new KVIHEADDataTable(ds.Tables["KVIHEAD"]));
                }
                if ((ds.Tables["DOCHEAD"] != null)) {
                    base.Tables.Add(new DOCHEADDataTable(ds.Tables["DOCHEAD"]));
                }
                if ((ds.Tables["DECLARBODY"] != null)) {
                    base.Tables.Add(new DECLARBODYDataTable(ds.Tables["DECLARBODY"]));
                }
                if ((ds.Tables["INF_ERR"] != null)) {
                    base.Tables.Add(new INF_ERRDataTable(ds.Tables["INF_ERR"]));
                }
                if ((ds.Tables["ERR_REK"] != null)) {
                    base.Tables.Add(new ERR_REKDataTable(ds.Tables["ERR_REK"]));
                }
                if ((ds.Tables["ERR_KOD"] != null)) {
                    base.Tables.Add(new ERR_KODDataTable(ds.Tables["ERR_KOD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KVIHEADDataTable KVIHEAD {
            get {
                return this.tableKVIHEAD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DOCHEADDataTable DOCHEAD {
            get {
                return this.tableDOCHEAD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DECLARBODYDataTable DECLARBODY {
            get {
                return this.tableDECLARBODY;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public INF_ERRDataTable INF_ERR {
            get {
                return this.tableINF_ERR;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ERR_REKDataTable ERR_REK {
            get {
                return this.tableERR_REK;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ERR_KODDataTable ERR_KOD {
            get {
                return this.tableERR_KOD;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DECLARATION cln = ((DECLARATION)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["KVIHEAD"] != null)) {
                    base.Tables.Add(new KVIHEADDataTable(ds.Tables["KVIHEAD"]));
                }
                if ((ds.Tables["DOCHEAD"] != null)) {
                    base.Tables.Add(new DOCHEADDataTable(ds.Tables["DOCHEAD"]));
                }
                if ((ds.Tables["DECLARBODY"] != null)) {
                    base.Tables.Add(new DECLARBODYDataTable(ds.Tables["DECLARBODY"]));
                }
                if ((ds.Tables["INF_ERR"] != null)) {
                    base.Tables.Add(new INF_ERRDataTable(ds.Tables["INF_ERR"]));
                }
                if ((ds.Tables["ERR_REK"] != null)) {
                    base.Tables.Add(new ERR_REKDataTable(ds.Tables["ERR_REK"]));
                }
                if ((ds.Tables["ERR_KOD"] != null)) {
                    base.Tables.Add(new ERR_KODDataTable(ds.Tables["ERR_KOD"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableKVIHEAD = ((KVIHEADDataTable)(base.Tables["KVIHEAD"]));
            if ((initTable == true)) {
                if ((this.tableKVIHEAD != null)) {
                    this.tableKVIHEAD.InitVars();
                }
            }
            this.tableDOCHEAD = ((DOCHEADDataTable)(base.Tables["DOCHEAD"]));
            if ((initTable == true)) {
                if ((this.tableDOCHEAD != null)) {
                    this.tableDOCHEAD.InitVars();
                }
            }
            this.tableDECLARBODY = ((DECLARBODYDataTable)(base.Tables["DECLARBODY"]));
            if ((initTable == true)) {
                if ((this.tableDECLARBODY != null)) {
                    this.tableDECLARBODY.InitVars();
                }
            }
            this.tableINF_ERR = ((INF_ERRDataTable)(base.Tables["INF_ERR"]));
            if ((initTable == true)) {
                if ((this.tableINF_ERR != null)) {
                    this.tableINF_ERR.InitVars();
                }
            }
            this.tableERR_REK = ((ERR_REKDataTable)(base.Tables["ERR_REK"]));
            if ((initTable == true)) {
                if ((this.tableERR_REK != null)) {
                    this.tableERR_REK.InitVars();
                }
            }
            this.tableERR_KOD = ((ERR_KODDataTable)(base.Tables["ERR_KOD"]));
            if ((initTable == true)) {
                if ((this.tableERR_KOD != null)) {
                    this.tableERR_KOD.InitVars();
                }
            }
            this.relationKVIHEAD_DOCHEAD = this.Relations["KVIHEAD_DOCHEAD"];
            this.relationDECLARBODY_INF_ERR = this.Relations["DECLARBODY_INF_ERR"];
            this.relationINF_ERR_ERR_REK = this.Relations["INF_ERR_ERR_REK"];
            this.relationINF_ERR_ERR_KOD = this.Relations["INF_ERR_ERR_KOD"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DECLARATION";
            this.Prefix = "";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableKVIHEAD = new KVIHEADDataTable();
            base.Tables.Add(this.tableKVIHEAD);
            this.tableDOCHEAD = new DOCHEADDataTable();
            base.Tables.Add(this.tableDOCHEAD);
            this.tableDECLARBODY = new DECLARBODYDataTable();
            base.Tables.Add(this.tableDECLARBODY);
            this.tableINF_ERR = new INF_ERRDataTable();
            base.Tables.Add(this.tableINF_ERR);
            this.tableERR_REK = new ERR_REKDataTable();
            base.Tables.Add(this.tableERR_REK);
            this.tableERR_KOD = new ERR_KODDataTable();
            base.Tables.Add(this.tableERR_KOD);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("KVIHEAD_DOCHEAD", new global::System.Data.DataColumn[] {
                        this.tableKVIHEAD.KVIHEAD_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDOCHEAD.KVIHEAD_IdColumn});
            this.tableDOCHEAD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("DECLARBODY_INF_ERR", new global::System.Data.DataColumn[] {
                        this.tableDECLARBODY.DECLARBODY_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableINF_ERR.DECLARBODY_IdColumn});
            this.tableINF_ERR.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("INF_ERR_ERR_REK", new global::System.Data.DataColumn[] {
                        this.tableINF_ERR.INF_ERR_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableERR_REK.INF_ERR_IdColumn});
            this.tableERR_REK.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("INF_ERR_ERR_KOD", new global::System.Data.DataColumn[] {
                        this.tableINF_ERR.INF_ERR_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableERR_KOD.INF_ERR_IdColumn});
            this.tableERR_KOD.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationKVIHEAD_DOCHEAD = new global::System.Data.DataRelation("KVIHEAD_DOCHEAD", new global::System.Data.DataColumn[] {
                        this.tableKVIHEAD.KVIHEAD_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableDOCHEAD.KVIHEAD_IdColumn}, false);
            this.relationKVIHEAD_DOCHEAD.Nested = true;
            this.Relations.Add(this.relationKVIHEAD_DOCHEAD);
            this.relationDECLARBODY_INF_ERR = new global::System.Data.DataRelation("DECLARBODY_INF_ERR", new global::System.Data.DataColumn[] {
                        this.tableDECLARBODY.DECLARBODY_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableINF_ERR.DECLARBODY_IdColumn}, false);
            this.relationDECLARBODY_INF_ERR.Nested = true;
            this.Relations.Add(this.relationDECLARBODY_INF_ERR);
            this.relationINF_ERR_ERR_REK = new global::System.Data.DataRelation("INF_ERR_ERR_REK", new global::System.Data.DataColumn[] {
                        this.tableINF_ERR.INF_ERR_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableERR_REK.INF_ERR_IdColumn}, false);
            this.relationINF_ERR_ERR_REK.Nested = true;
            this.Relations.Add(this.relationINF_ERR_ERR_REK);
            this.relationINF_ERR_ERR_KOD = new global::System.Data.DataRelation("INF_ERR_ERR_KOD", new global::System.Data.DataColumn[] {
                        this.tableINF_ERR.INF_ERR_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableERR_KOD.INF_ERR_IdColumn}, false);
            this.relationINF_ERR_ERR_KOD.Nested = true;
            this.Relations.Add(this.relationINF_ERR_ERR_KOD);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKVIHEAD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDOCHEAD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDECLARBODY() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeINF_ERR() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeERR_REK() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeERR_KOD() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DECLARATION ds = new DECLARATION();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void KVIHEADRowChangeEventHandler(object sender, KVIHEADRowChangeEvent e);
        
        public delegate void DOCHEADRowChangeEventHandler(object sender, DOCHEADRowChangeEvent e);
        
        public delegate void DECLARBODYRowChangeEventHandler(object sender, DECLARBODYRowChangeEvent e);
        
        public delegate void INF_ERRRowChangeEventHandler(object sender, INF_ERRRowChangeEvent e);
        
        public delegate void ERR_REKRowChangeEventHandler(object sender, ERR_REKRowChangeEvent e);
        
        public delegate void ERR_KODRowChangeEventHandler(object sender, ERR_KODRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KVIHEADDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFNAME;
            
            private global::System.Data.DataColumn columnDOCFNAME;
            
            private global::System.Data.DataColumn columnRESULT;
            
            private global::System.Data.DataColumn columnKVTDATE;
            
            private global::System.Data.DataColumn columnKVTTIME;
            
            private global::System.Data.DataColumn columnKVTNUM;
            
            private global::System.Data.DataColumn columnTEXT;
            
            private global::System.Data.DataColumn columnKVIHEAD_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KVIHEADDataTable() {
                this.TableName = "KVIHEAD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KVIHEADDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KVIHEADDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNAMEColumn {
                get {
                    return this.columnFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCFNAMEColumn {
                get {
                    return this.columnDOCFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESULTColumn {
                get {
                    return this.columnRESULT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVTDATEColumn {
                get {
                    return this.columnKVTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVTTIMEColumn {
                get {
                    return this.columnKVTTIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVTNUMColumn {
                get {
                    return this.columnKVTNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TEXTColumn {
                get {
                    return this.columnTEXT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVIHEAD_IdColumn {
                get {
                    return this.columnKVIHEAD_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KVIHEADRow this[int index] {
                get {
                    return ((KVIHEADRow)(this.Rows[index]));
                }
            }
            
            public event KVIHEADRowChangeEventHandler KVIHEADRowChanging;
            
            public event KVIHEADRowChangeEventHandler KVIHEADRowChanged;
            
            public event KVIHEADRowChangeEventHandler KVIHEADRowDeleting;
            
            public event KVIHEADRowChangeEventHandler KVIHEADRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKVIHEADRow(KVIHEADRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KVIHEADRow AddKVIHEADRow(string FNAME, string DOCFNAME, long RESULT, string KVTDATE, string KVTTIME, long KVTNUM, string TEXT) {
                KVIHEADRow rowKVIHEADRow = ((KVIHEADRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FNAME,
                        DOCFNAME,
                        RESULT,
                        KVTDATE,
                        KVTTIME,
                        KVTNUM,
                        TEXT,
                        null};
                rowKVIHEADRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKVIHEADRow);
                return rowKVIHEADRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KVIHEADDataTable cln = ((KVIHEADDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KVIHEADDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFNAME = base.Columns["FNAME"];
                this.columnDOCFNAME = base.Columns["DOCFNAME"];
                this.columnRESULT = base.Columns["RESULT"];
                this.columnKVTDATE = base.Columns["KVTDATE"];
                this.columnKVTTIME = base.Columns["KVTTIME"];
                this.columnKVTNUM = base.Columns["KVTNUM"];
                this.columnTEXT = base.Columns["TEXT"];
                this.columnKVIHEAD_Id = base.Columns["KVIHEAD_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFNAME = new global::System.Data.DataColumn("FNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNAME);
                this.columnDOCFNAME = new global::System.Data.DataColumn("DOCFNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCFNAME);
                this.columnRESULT = new global::System.Data.DataColumn("RESULT", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESULT);
                this.columnKVTDATE = new global::System.Data.DataColumn("KVTDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVTDATE);
                this.columnKVTTIME = new global::System.Data.DataColumn("KVTTIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVTTIME);
                this.columnKVTNUM = new global::System.Data.DataColumn("KVTNUM", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVTNUM);
                this.columnTEXT = new global::System.Data.DataColumn("TEXT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEXT);
                this.columnKVIHEAD_Id = new global::System.Data.DataColumn("KVIHEAD_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKVIHEAD_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnKVIHEAD_Id}, true));
                this.columnFNAME.AllowDBNull = false;
                this.columnFNAME.MaxLength = 31;
                this.columnDOCFNAME.AllowDBNull = false;
                this.columnDOCFNAME.MaxLength = 31;
                this.columnRESULT.AllowDBNull = false;
                this.columnKVTDATE.AllowDBNull = false;
                this.columnKVTTIME.AllowDBNull = false;
                this.columnKVTNUM.AllowDBNull = false;
                this.columnTEXT.AllowDBNull = false;
                this.columnKVIHEAD_Id.AutoIncrement = true;
                this.columnKVIHEAD_Id.AllowDBNull = false;
                this.columnKVIHEAD_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KVIHEADRow NewKVIHEADRow() {
                return ((KVIHEADRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KVIHEADRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KVIHEADRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KVIHEADRowChanged != null)) {
                    this.KVIHEADRowChanged(this, new KVIHEADRowChangeEvent(((KVIHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KVIHEADRowChanging != null)) {
                    this.KVIHEADRowChanging(this, new KVIHEADRowChangeEvent(((KVIHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KVIHEADRowDeleted != null)) {
                    this.KVIHEADRowDeleted(this, new KVIHEADRowChangeEvent(((KVIHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KVIHEADRowDeleting != null)) {
                    this.KVIHEADRowDeleting(this, new KVIHEADRowChangeEvent(((KVIHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKVIHEADRow(KVIHEADRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DECLARATION ds = new DECLARATION();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KVIHEADDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DOCHEADDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFNAME;
            
            private global::System.Data.DataColumn columnEDRPOU;
            
            private global::System.Data.DataColumn columnIDBANK;
            
            private global::System.Data.DataColumn columnMFO;
            
            private global::System.Data.DataColumn columnCDTASK;
            
            private global::System.Data.DataColumn columnCDSUB;
            
            private global::System.Data.DataColumn columnCDFORM;
            
            private global::System.Data.DataColumn columnFILL_DATE;
            
            private global::System.Data.DataColumn columnFILL_TIME;
            
            private global::System.Data.DataColumn columnEI;
            
            private global::System.Data.DataColumn columnKU;
            
            private global::System.Data.DataColumn columnKVIHEAD_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCHEADDataTable() {
                this.TableName = "DOCHEAD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DOCHEADDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DOCHEADDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNAMEColumn {
                get {
                    return this.columnFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EDRPOUColumn {
                get {
                    return this.columnEDRPOU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDBANKColumn {
                get {
                    return this.columnIDBANK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MFOColumn {
                get {
                    return this.columnMFO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CDTASKColumn {
                get {
                    return this.columnCDTASK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CDSUBColumn {
                get {
                    return this.columnCDSUB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CDFORMColumn {
                get {
                    return this.columnCDFORM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILL_DATEColumn {
                get {
                    return this.columnFILL_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILL_TIMEColumn {
                get {
                    return this.columnFILL_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EIColumn {
                get {
                    return this.columnEI;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KUColumn {
                get {
                    return this.columnKU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVIHEAD_IdColumn {
                get {
                    return this.columnKVIHEAD_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCHEADRow this[int index] {
                get {
                    return ((DOCHEADRow)(this.Rows[index]));
                }
            }
            
            public event DOCHEADRowChangeEventHandler DOCHEADRowChanging;
            
            public event DOCHEADRowChangeEventHandler DOCHEADRowChanged;
            
            public event DOCHEADRowChangeEventHandler DOCHEADRowDeleting;
            
            public event DOCHEADRowChangeEventHandler DOCHEADRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDOCHEADRow(DOCHEADRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCHEADRow AddDOCHEADRow(string FNAME, string EDRPOU, string IDBANK, long MFO, string CDTASK, string CDSUB, string CDFORM, string FILL_DATE, string FILL_TIME, string EI, long KU, KVIHEADRow parentKVIHEADRowByKVIHEAD_DOCHEAD) {
                DOCHEADRow rowDOCHEADRow = ((DOCHEADRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FNAME,
                        EDRPOU,
                        IDBANK,
                        MFO,
                        CDTASK,
                        CDSUB,
                        CDFORM,
                        FILL_DATE,
                        FILL_TIME,
                        EI,
                        KU,
                        null};
                if ((parentKVIHEADRowByKVIHEAD_DOCHEAD != null)) {
                    columnValuesArray[11] = parentKVIHEADRowByKVIHEAD_DOCHEAD[7];
                }
                rowDOCHEADRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDOCHEADRow);
                return rowDOCHEADRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DOCHEADDataTable cln = ((DOCHEADDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DOCHEADDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFNAME = base.Columns["FNAME"];
                this.columnEDRPOU = base.Columns["EDRPOU"];
                this.columnIDBANK = base.Columns["IDBANK"];
                this.columnMFO = base.Columns["MFO"];
                this.columnCDTASK = base.Columns["CDTASK"];
                this.columnCDSUB = base.Columns["CDSUB"];
                this.columnCDFORM = base.Columns["CDFORM"];
                this.columnFILL_DATE = base.Columns["FILL_DATE"];
                this.columnFILL_TIME = base.Columns["FILL_TIME"];
                this.columnEI = base.Columns["EI"];
                this.columnKU = base.Columns["KU"];
                this.columnKVIHEAD_Id = base.Columns["KVIHEAD_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFNAME = new global::System.Data.DataColumn("FNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNAME);
                this.columnEDRPOU = new global::System.Data.DataColumn("EDRPOU", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEDRPOU);
                this.columnIDBANK = new global::System.Data.DataColumn("IDBANK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIDBANK);
                this.columnMFO = new global::System.Data.DataColumn("MFO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMFO);
                this.columnCDTASK = new global::System.Data.DataColumn("CDTASK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCDTASK);
                this.columnCDSUB = new global::System.Data.DataColumn("CDSUB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCDSUB);
                this.columnCDFORM = new global::System.Data.DataColumn("CDFORM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCDFORM);
                this.columnFILL_DATE = new global::System.Data.DataColumn("FILL_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILL_DATE);
                this.columnFILL_TIME = new global::System.Data.DataColumn("FILL_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILL_TIME);
                this.columnEI = new global::System.Data.DataColumn("EI", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEI);
                this.columnKU = new global::System.Data.DataColumn("KU", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKU);
                this.columnKVIHEAD_Id = new global::System.Data.DataColumn("KVIHEAD_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnKVIHEAD_Id);
                this.columnFNAME.AllowDBNull = false;
                this.columnFNAME.MaxLength = 31;
                this.columnEDRPOU.AllowDBNull = false;
                this.columnEDRPOU.MaxLength = 10;
                this.columnCDTASK.AllowDBNull = false;
                this.columnCDSUB.MaxLength = 5;
                this.columnCDFORM.AllowDBNull = false;
                this.columnFILL_DATE.AllowDBNull = false;
                this.columnFILL_TIME.AllowDBNull = false;
                this.columnEI.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCHEADRow NewDOCHEADRow() {
                return ((DOCHEADRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DOCHEADRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DOCHEADRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DOCHEADRowChanged != null)) {
                    this.DOCHEADRowChanged(this, new DOCHEADRowChangeEvent(((DOCHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DOCHEADRowChanging != null)) {
                    this.DOCHEADRowChanging(this, new DOCHEADRowChangeEvent(((DOCHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DOCHEADRowDeleted != null)) {
                    this.DOCHEADRowDeleted(this, new DOCHEADRowChangeEvent(((DOCHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DOCHEADRowDeleting != null)) {
                    this.DOCHEADRowDeleting(this, new DOCHEADRowChangeEvent(((DOCHEADRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDOCHEADRow(DOCHEADRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DECLARATION ds = new DECLARATION();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DOCHEADDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DECLARBODYDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKVI_ERROR;
            
            private global::System.Data.DataColumn columnREESTR_ID;
            
            private global::System.Data.DataColumn columnKVI_COMMENT;
            
            private global::System.Data.DataColumn columnRESERVE;
            
            private global::System.Data.DataColumn columnDECLARBODY_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARBODYDataTable() {
                this.TableName = "DECLARBODY";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DECLARBODYDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DECLARBODYDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVI_ERRORColumn {
                get {
                    return this.columnKVI_ERROR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REESTR_IDColumn {
                get {
                    return this.columnREESTR_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVI_COMMENTColumn {
                get {
                    return this.columnKVI_COMMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESERVEColumn {
                get {
                    return this.columnRESERVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARBODY_IdColumn {
                get {
                    return this.columnDECLARBODY_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARBODYRow this[int index] {
                get {
                    return ((DECLARBODYRow)(this.Rows[index]));
                }
            }
            
            public event DECLARBODYRowChangeEventHandler DECLARBODYRowChanging;
            
            public event DECLARBODYRowChangeEventHandler DECLARBODYRowChanged;
            
            public event DECLARBODYRowChangeEventHandler DECLARBODYRowDeleting;
            
            public event DECLARBODYRowChangeEventHandler DECLARBODYRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDECLARBODYRow(DECLARBODYRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARBODYRow AddDECLARBODYRow(string KVI_ERROR, ulong REESTR_ID, string KVI_COMMENT, string RESERVE) {
                DECLARBODYRow rowDECLARBODYRow = ((DECLARBODYRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KVI_ERROR,
                        REESTR_ID,
                        KVI_COMMENT,
                        RESERVE,
                        null};
                rowDECLARBODYRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDECLARBODYRow);
                return rowDECLARBODYRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DECLARBODYDataTable cln = ((DECLARBODYDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DECLARBODYDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKVI_ERROR = base.Columns["KVI_ERROR"];
                this.columnREESTR_ID = base.Columns["REESTR_ID"];
                this.columnKVI_COMMENT = base.Columns["KVI_COMMENT"];
                this.columnRESERVE = base.Columns["RESERVE"];
                this.columnDECLARBODY_Id = base.Columns["DECLARBODY_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKVI_ERROR = new global::System.Data.DataColumn("KVI_ERROR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVI_ERROR);
                this.columnREESTR_ID = new global::System.Data.DataColumn("REESTR_ID", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREESTR_ID);
                this.columnKVI_COMMENT = new global::System.Data.DataColumn("KVI_COMMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVI_COMMENT);
                this.columnRESERVE = new global::System.Data.DataColumn("RESERVE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESERVE);
                this.columnDECLARBODY_Id = new global::System.Data.DataColumn("DECLARBODY_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARBODY_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDECLARBODY_Id}, true));
                this.columnKVI_ERROR.AllowDBNull = false;
                this.columnKVI_ERROR.MaxLength = 4;
                this.columnKVI_COMMENT.MaxLength = 1000;
                this.columnRESERVE.MaxLength = 300;
                this.columnDECLARBODY_Id.AutoIncrement = true;
                this.columnDECLARBODY_Id.AllowDBNull = false;
                this.columnDECLARBODY_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARBODYRow NewDECLARBODYRow() {
                return ((DECLARBODYRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DECLARBODYRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DECLARBODYRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DECLARBODYRowChanged != null)) {
                    this.DECLARBODYRowChanged(this, new DECLARBODYRowChangeEvent(((DECLARBODYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DECLARBODYRowChanging != null)) {
                    this.DECLARBODYRowChanging(this, new DECLARBODYRowChangeEvent(((DECLARBODYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DECLARBODYRowDeleted != null)) {
                    this.DECLARBODYRowDeleted(this, new DECLARBODYRowChangeEvent(((DECLARBODYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DECLARBODYRowDeleting != null)) {
                    this.DECLARBODYRowDeleting(this, new DECLARBODYRowChangeEvent(((DECLARBODYRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDECLARBODYRow(DECLARBODYRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DECLARATION ds = new DECLARATION();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DECLARBODYDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class INF_ERRDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnROWNUM;
            
            private global::System.Data.DataColumn columnINF_ERR_Id;
            
            private global::System.Data.DataColumn columnDECLARBODY_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRDataTable() {
                this.TableName = "INF_ERR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INF_ERRDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected INF_ERRDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ROWNUMColumn {
                get {
                    return this.columnROWNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INF_ERR_IdColumn {
                get {
                    return this.columnINF_ERR_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DECLARBODY_IdColumn {
                get {
                    return this.columnDECLARBODY_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRow this[int index] {
                get {
                    return ((INF_ERRRow)(this.Rows[index]));
                }
            }
            
            public event INF_ERRRowChangeEventHandler INF_ERRRowChanging;
            
            public event INF_ERRRowChangeEventHandler INF_ERRRowChanged;
            
            public event INF_ERRRowChangeEventHandler INF_ERRRowDeleting;
            
            public event INF_ERRRowChangeEventHandler INF_ERRRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddINF_ERRRow(INF_ERRRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRow AddINF_ERRRow(int ROWNUM, DECLARBODYRow parentDECLARBODYRowByDECLARBODY_INF_ERR) {
                INF_ERRRow rowINF_ERRRow = ((INF_ERRRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ROWNUM,
                        null,
                        null};
                if ((parentDECLARBODYRowByDECLARBODY_INF_ERR != null)) {
                    columnValuesArray[2] = parentDECLARBODYRowByDECLARBODY_INF_ERR[4];
                }
                rowINF_ERRRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowINF_ERRRow);
                return rowINF_ERRRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                INF_ERRDataTable cln = ((INF_ERRDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new INF_ERRDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnROWNUM = base.Columns["ROWNUM"];
                this.columnINF_ERR_Id = base.Columns["INF_ERR_Id"];
                this.columnDECLARBODY_Id = base.Columns["DECLARBODY_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnROWNUM = new global::System.Data.DataColumn("ROWNUM", typeof(int), null, global::System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnROWNUM);
                this.columnINF_ERR_Id = new global::System.Data.DataColumn("INF_ERR_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnINF_ERR_Id);
                this.columnDECLARBODY_Id = new global::System.Data.DataColumn("DECLARBODY_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnDECLARBODY_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnINF_ERR_Id}, true));
                this.columnROWNUM.AllowDBNull = false;
                this.columnROWNUM.Namespace = "";
                this.columnINF_ERR_Id.AutoIncrement = true;
                this.columnINF_ERR_Id.AllowDBNull = false;
                this.columnINF_ERR_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRow NewINF_ERRRow() {
                return ((INF_ERRRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new INF_ERRRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(INF_ERRRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.INF_ERRRowChanged != null)) {
                    this.INF_ERRRowChanged(this, new INF_ERRRowChangeEvent(((INF_ERRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.INF_ERRRowChanging != null)) {
                    this.INF_ERRRowChanging(this, new INF_ERRRowChangeEvent(((INF_ERRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.INF_ERRRowDeleted != null)) {
                    this.INF_ERRRowDeleted(this, new INF_ERRRowChangeEvent(((INF_ERRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.INF_ERRRowDeleting != null)) {
                    this.INF_ERRRowDeleting(this, new INF_ERRRowChangeEvent(((INF_ERRRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveINF_ERRRow(INF_ERRRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DECLARATION ds = new DECLARATION();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "INF_ERRDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ERR_REKDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnERR_REK_text;
            
            private global::System.Data.DataColumn columnINF_ERR_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_REKDataTable() {
                this.TableName = "ERR_REK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ERR_REKDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ERR_REKDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ERR_REK_textColumn {
                get {
                    return this.columnERR_REK_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INF_ERR_IdColumn {
                get {
                    return this.columnINF_ERR_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_REKRow this[int index] {
                get {
                    return ((ERR_REKRow)(this.Rows[index]));
                }
            }
            
            public event ERR_REKRowChangeEventHandler ERR_REKRowChanging;
            
            public event ERR_REKRowChangeEventHandler ERR_REKRowChanged;
            
            public event ERR_REKRowChangeEventHandler ERR_REKRowDeleting;
            
            public event ERR_REKRowChangeEventHandler ERR_REKRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddERR_REKRow(ERR_REKRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_REKRow AddERR_REKRow(string ERR_REK_text, INF_ERRRow parentINF_ERRRowByINF_ERR_ERR_REK) {
                ERR_REKRow rowERR_REKRow = ((ERR_REKRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ERR_REK_text,
                        null};
                if ((parentINF_ERRRowByINF_ERR_ERR_REK != null)) {
                    columnValuesArray[1] = parentINF_ERRRowByINF_ERR_ERR_REK[1];
                }
                rowERR_REKRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowERR_REKRow);
                return rowERR_REKRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ERR_REKDataTable cln = ((ERR_REKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ERR_REKDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnERR_REK_text = base.Columns["ERR_REK_text"];
                this.columnINF_ERR_Id = base.Columns["INF_ERR_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnERR_REK_text = new global::System.Data.DataColumn("ERR_REK_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnERR_REK_text);
                this.columnINF_ERR_Id = new global::System.Data.DataColumn("INF_ERR_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnINF_ERR_Id);
                this.columnERR_REK_text.AllowDBNull = false;
                this.columnERR_REK_text.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_REKRow NewERR_REKRow() {
                return ((ERR_REKRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ERR_REKRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ERR_REKRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ERR_REKRowChanged != null)) {
                    this.ERR_REKRowChanged(this, new ERR_REKRowChangeEvent(((ERR_REKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ERR_REKRowChanging != null)) {
                    this.ERR_REKRowChanging(this, new ERR_REKRowChangeEvent(((ERR_REKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ERR_REKRowDeleted != null)) {
                    this.ERR_REKRowDeleted(this, new ERR_REKRowChangeEvent(((ERR_REKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ERR_REKRowDeleting != null)) {
                    this.ERR_REKRowDeleting(this, new ERR_REKRowChangeEvent(((ERR_REKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveERR_REKRow(ERR_REKRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DECLARATION ds = new DECLARATION();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ERR_REKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ERR_KODDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnERR_KOD_text;
            
            private global::System.Data.DataColumn columnINF_ERR_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_KODDataTable() {
                this.TableName = "ERR_KOD";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ERR_KODDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ERR_KODDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ERR_KOD_textColumn {
                get {
                    return this.columnERR_KOD_text;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INF_ERR_IdColumn {
                get {
                    return this.columnINF_ERR_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_KODRow this[int index] {
                get {
                    return ((ERR_KODRow)(this.Rows[index]));
                }
            }
            
            public event ERR_KODRowChangeEventHandler ERR_KODRowChanging;
            
            public event ERR_KODRowChangeEventHandler ERR_KODRowChanged;
            
            public event ERR_KODRowChangeEventHandler ERR_KODRowDeleting;
            
            public event ERR_KODRowChangeEventHandler ERR_KODRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddERR_KODRow(ERR_KODRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_KODRow AddERR_KODRow(string ERR_KOD_text, INF_ERRRow parentINF_ERRRowByINF_ERR_ERR_KOD) {
                ERR_KODRow rowERR_KODRow = ((ERR_KODRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ERR_KOD_text,
                        null};
                if ((parentINF_ERRRowByINF_ERR_ERR_KOD != null)) {
                    columnValuesArray[1] = parentINF_ERRRowByINF_ERR_ERR_KOD[1];
                }
                rowERR_KODRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowERR_KODRow);
                return rowERR_KODRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ERR_KODDataTable cln = ((ERR_KODDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ERR_KODDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnERR_KOD_text = base.Columns["ERR_KOD_text"];
                this.columnINF_ERR_Id = base.Columns["INF_ERR_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnERR_KOD_text = new global::System.Data.DataColumn("ERR_KOD_text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
                base.Columns.Add(this.columnERR_KOD_text);
                this.columnINF_ERR_Id = new global::System.Data.DataColumn("INF_ERR_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnINF_ERR_Id);
                this.columnERR_KOD_text.AllowDBNull = false;
                this.columnERR_KOD_text.MaxLength = 4;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_KODRow NewERR_KODRow() {
                return ((ERR_KODRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ERR_KODRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ERR_KODRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ERR_KODRowChanged != null)) {
                    this.ERR_KODRowChanged(this, new ERR_KODRowChangeEvent(((ERR_KODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ERR_KODRowChanging != null)) {
                    this.ERR_KODRowChanging(this, new ERR_KODRowChangeEvent(((ERR_KODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ERR_KODRowDeleted != null)) {
                    this.ERR_KODRowDeleted(this, new ERR_KODRowChangeEvent(((ERR_KODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ERR_KODRowDeleting != null)) {
                    this.ERR_KODRowDeleting(this, new ERR_KODRowChangeEvent(((ERR_KODRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveERR_KODRow(ERR_KODRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DECLARATION ds = new DECLARATION();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ERR_KODDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KVIHEADRow : global::System.Data.DataRow {
            
            private KVIHEADDataTable tableKVIHEAD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KVIHEADRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKVIHEAD = ((KVIHEADDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNAME {
                get {
                    return ((string)(this[this.tableKVIHEAD.FNAMEColumn]));
                }
                set {
                    this[this.tableKVIHEAD.FNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCFNAME {
                get {
                    return ((string)(this[this.tableKVIHEAD.DOCFNAMEColumn]));
                }
                set {
                    this[this.tableKVIHEAD.DOCFNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RESULT {
                get {
                    return ((long)(this[this.tableKVIHEAD.RESULTColumn]));
                }
                set {
                    this[this.tableKVIHEAD.RESULTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KVTDATE {
                get {
                    return ((string)(this[this.tableKVIHEAD.KVTDATEColumn]));
                }
                set {
                    this[this.tableKVIHEAD.KVTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KVTTIME {
                get {
                    return ((string)(this[this.tableKVIHEAD.KVTTIMEColumn]));
                }
                set {
                    this[this.tableKVIHEAD.KVTTIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long KVTNUM {
                get {
                    return ((long)(this[this.tableKVIHEAD.KVTNUMColumn]));
                }
                set {
                    this[this.tableKVIHEAD.KVTNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEXT {
                get {
                    return ((string)(this[this.tableKVIHEAD.TEXTColumn]));
                }
                set {
                    this[this.tableKVIHEAD.TEXTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KVIHEAD_Id {
                get {
                    return ((int)(this[this.tableKVIHEAD.KVIHEAD_IdColumn]));
                }
                set {
                    this[this.tableKVIHEAD.KVIHEAD_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCHEADRow[] GetDOCHEADRows() {
                if ((this.Table.ChildRelations["KVIHEAD_DOCHEAD"] == null)) {
                    return new DOCHEADRow[0];
                }
                else {
                    return ((DOCHEADRow[])(base.GetChildRows(this.Table.ChildRelations["KVIHEAD_DOCHEAD"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DOCHEADRow : global::System.Data.DataRow {
            
            private DOCHEADDataTable tableDOCHEAD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DOCHEADRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDOCHEAD = ((DOCHEADDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNAME {
                get {
                    return ((string)(this[this.tableDOCHEAD.FNAMEColumn]));
                }
                set {
                    this[this.tableDOCHEAD.FNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EDRPOU {
                get {
                    return ((string)(this[this.tableDOCHEAD.EDRPOUColumn]));
                }
                set {
                    this[this.tableDOCHEAD.EDRPOUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IDBANK {
                get {
                    try {
                        return ((string)(this[this.tableDOCHEAD.IDBANKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IDBANK\' in table \'DOCHEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDOCHEAD.IDBANKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MFO {
                get {
                    try {
                        return ((long)(this[this.tableDOCHEAD.MFOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MFO\' in table \'DOCHEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDOCHEAD.MFOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDTASK {
                get {
                    return ((string)(this[this.tableDOCHEAD.CDTASKColumn]));
                }
                set {
                    this[this.tableDOCHEAD.CDTASKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDSUB {
                get {
                    try {
                        return ((string)(this[this.tableDOCHEAD.CDSUBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CDSUB\' in table \'DOCHEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDOCHEAD.CDSUBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CDFORM {
                get {
                    return ((string)(this[this.tableDOCHEAD.CDFORMColumn]));
                }
                set {
                    this[this.tableDOCHEAD.CDFORMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILL_DATE {
                get {
                    return ((string)(this[this.tableDOCHEAD.FILL_DATEColumn]));
                }
                set {
                    this[this.tableDOCHEAD.FILL_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILL_TIME {
                get {
                    return ((string)(this[this.tableDOCHEAD.FILL_TIMEColumn]));
                }
                set {
                    this[this.tableDOCHEAD.FILL_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EI {
                get {
                    try {
                        return ((string)(this[this.tableDOCHEAD.EIColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EI\' in table \'DOCHEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDOCHEAD.EIColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long KU {
                get {
                    try {
                        return ((long)(this[this.tableDOCHEAD.KUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KU\' in table \'DOCHEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDOCHEAD.KUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int KVIHEAD_Id {
                get {
                    try {
                        return ((int)(this[this.tableDOCHEAD.KVIHEAD_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KVIHEAD_Id\' in table \'DOCHEAD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDOCHEAD.KVIHEAD_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KVIHEADRow KVIHEADRow {
                get {
                    return ((KVIHEADRow)(this.GetParentRow(this.Table.ParentRelations["KVIHEAD_DOCHEAD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["KVIHEAD_DOCHEAD"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDBANKNull() {
                return this.IsNull(this.tableDOCHEAD.IDBANKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDBANKNull() {
                this[this.tableDOCHEAD.IDBANKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMFONull() {
                return this.IsNull(this.tableDOCHEAD.MFOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMFONull() {
                this[this.tableDOCHEAD.MFOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCDSUBNull() {
                return this.IsNull(this.tableDOCHEAD.CDSUBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCDSUBNull() {
                this[this.tableDOCHEAD.CDSUBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEINull() {
                return this.IsNull(this.tableDOCHEAD.EIColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEINull() {
                this[this.tableDOCHEAD.EIColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKUNull() {
                return this.IsNull(this.tableDOCHEAD.KUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKUNull() {
                this[this.tableDOCHEAD.KUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKVIHEAD_IdNull() {
                return this.IsNull(this.tableDOCHEAD.KVIHEAD_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKVIHEAD_IdNull() {
                this[this.tableDOCHEAD.KVIHEAD_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DECLARBODYRow : global::System.Data.DataRow {
            
            private DECLARBODYDataTable tableDECLARBODY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DECLARBODYRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDECLARBODY = ((DECLARBODYDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KVI_ERROR {
                get {
                    return ((string)(this[this.tableDECLARBODY.KVI_ERRORColumn]));
                }
                set {
                    this[this.tableDECLARBODY.KVI_ERRORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong REESTR_ID {
                get {
                    try {
                        return ((ulong)(this[this.tableDECLARBODY.REESTR_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REESTR_ID\' in table \'DECLARBODY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDECLARBODY.REESTR_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KVI_COMMENT {
                get {
                    try {
                        return ((string)(this[this.tableDECLARBODY.KVI_COMMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KVI_COMMENT\' in table \'DECLARBODY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDECLARBODY.KVI_COMMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESERVE {
                get {
                    try {
                        return ((string)(this[this.tableDECLARBODY.RESERVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RESERVE\' in table \'DECLARBODY\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDECLARBODY.RESERVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARBODY_Id {
                get {
                    return ((int)(this[this.tableDECLARBODY.DECLARBODY_IdColumn]));
                }
                set {
                    this[this.tableDECLARBODY.DECLARBODY_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREESTR_IDNull() {
                return this.IsNull(this.tableDECLARBODY.REESTR_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREESTR_IDNull() {
                this[this.tableDECLARBODY.REESTR_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKVI_COMMENTNull() {
                return this.IsNull(this.tableDECLARBODY.KVI_COMMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKVI_COMMENTNull() {
                this[this.tableDECLARBODY.KVI_COMMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESERVENull() {
                return this.IsNull(this.tableDECLARBODY.RESERVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESERVENull() {
                this[this.tableDECLARBODY.RESERVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRow[] GetINF_ERRRows() {
                if ((this.Table.ChildRelations["DECLARBODY_INF_ERR"] == null)) {
                    return new INF_ERRRow[0];
                }
                else {
                    return ((INF_ERRRow[])(base.GetChildRows(this.Table.ChildRelations["DECLARBODY_INF_ERR"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class INF_ERRRow : global::System.Data.DataRow {
            
            private INF_ERRDataTable tableINF_ERR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal INF_ERRRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableINF_ERR = ((INF_ERRDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ROWNUM {
                get {
                    return ((int)(this[this.tableINF_ERR.ROWNUMColumn]));
                }
                set {
                    this[this.tableINF_ERR.ROWNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int INF_ERR_Id {
                get {
                    return ((int)(this[this.tableINF_ERR.INF_ERR_IdColumn]));
                }
                set {
                    this[this.tableINF_ERR.INF_ERR_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DECLARBODY_Id {
                get {
                    try {
                        return ((int)(this[this.tableINF_ERR.DECLARBODY_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DECLARBODY_Id\' in table \'INF_ERR\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableINF_ERR.DECLARBODY_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARBODYRow DECLARBODYRow {
                get {
                    return ((DECLARBODYRow)(this.GetParentRow(this.Table.ParentRelations["DECLARBODY_INF_ERR"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DECLARBODY_INF_ERR"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDECLARBODY_IdNull() {
                return this.IsNull(this.tableINF_ERR.DECLARBODY_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDECLARBODY_IdNull() {
                this[this.tableINF_ERR.DECLARBODY_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_REKRow[] GetERR_REKRows() {
                if ((this.Table.ChildRelations["INF_ERR_ERR_REK"] == null)) {
                    return new ERR_REKRow[0];
                }
                else {
                    return ((ERR_REKRow[])(base.GetChildRows(this.Table.ChildRelations["INF_ERR_ERR_REK"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_KODRow[] GetERR_KODRows() {
                if ((this.Table.ChildRelations["INF_ERR_ERR_KOD"] == null)) {
                    return new ERR_KODRow[0];
                }
                else {
                    return ((ERR_KODRow[])(base.GetChildRows(this.Table.ChildRelations["INF_ERR_ERR_KOD"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ERR_REKRow : global::System.Data.DataRow {
            
            private ERR_REKDataTable tableERR_REK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ERR_REKRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableERR_REK = ((ERR_REKDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ERR_REK_text {
                get {
                    return ((string)(this[this.tableERR_REK.ERR_REK_textColumn]));
                }
                set {
                    this[this.tableERR_REK.ERR_REK_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int INF_ERR_Id {
                get {
                    try {
                        return ((int)(this[this.tableERR_REK.INF_ERR_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INF_ERR_Id\' in table \'ERR_REK\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableERR_REK.INF_ERR_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRow INF_ERRRow {
                get {
                    return ((INF_ERRRow)(this.GetParentRow(this.Table.ParentRelations["INF_ERR_ERR_REK"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["INF_ERR_ERR_REK"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINF_ERR_IdNull() {
                return this.IsNull(this.tableERR_REK.INF_ERR_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINF_ERR_IdNull() {
                this[this.tableERR_REK.INF_ERR_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ERR_KODRow : global::System.Data.DataRow {
            
            private ERR_KODDataTable tableERR_KOD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ERR_KODRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableERR_KOD = ((ERR_KODDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ERR_KOD_text {
                get {
                    return ((string)(this[this.tableERR_KOD.ERR_KOD_textColumn]));
                }
                set {
                    this[this.tableERR_KOD.ERR_KOD_textColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int INF_ERR_Id {
                get {
                    try {
                        return ((int)(this[this.tableERR_KOD.INF_ERR_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INF_ERR_Id\' in table \'ERR_KOD\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableERR_KOD.INF_ERR_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRow INF_ERRRow {
                get {
                    return ((INF_ERRRow)(this.GetParentRow(this.Table.ParentRelations["INF_ERR_ERR_KOD"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["INF_ERR_ERR_KOD"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINF_ERR_IdNull() {
                return this.IsNull(this.tableERR_KOD.INF_ERR_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINF_ERR_IdNull() {
                this[this.tableERR_KOD.INF_ERR_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KVIHEADRowChangeEvent : global::System.EventArgs {
            
            private KVIHEADRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KVIHEADRowChangeEvent(KVIHEADRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KVIHEADRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DOCHEADRowChangeEvent : global::System.EventArgs {
            
            private DOCHEADRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCHEADRowChangeEvent(DOCHEADRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DOCHEADRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DECLARBODYRowChangeEvent : global::System.EventArgs {
            
            private DECLARBODYRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARBODYRowChangeEvent(DECLARBODYRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DECLARBODYRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class INF_ERRRowChangeEvent : global::System.EventArgs {
            
            private INF_ERRRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRowChangeEvent(INF_ERRRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public INF_ERRRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ERR_REKRowChangeEvent : global::System.EventArgs {
            
            private ERR_REKRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_REKRowChangeEvent(ERR_REKRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_REKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ERR_KODRowChangeEvent : global::System.EventArgs {
            
            private ERR_KODRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_KODRowChangeEvent(ERR_KODRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ERR_KODRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
